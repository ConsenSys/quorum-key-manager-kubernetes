---
# Source: vault-operator/templates/sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-operator
  labels:
    helm.sh/chart: vault-operator-1.10.1
    app.kubernetes.io/name: vault-operator
    app.kubernetes.io/instance: vault-operator
    app.kubernetes.io/managed-by: Helm
---
# Source: vault-operator/templates/role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-operator
  labels:
    helm.sh/chart: vault-operator-1.10.1
rules:
- apiGroups:
  - vault.banzaicloud.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - events
  - pods
  - services
  - configmaps
  - secrets
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  - extensions
  resources:
  - replicasets
  verbs:
  - get
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments
  - deployments/finalizers
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - etcd.database.coreos.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - list
  - get
  - create
  - update
  - watch
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - update
  - list
  - get
  - create
  - watch
---
# Source: vault-operator/templates/rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-operator
  labels:
    helm.sh/chart: vault-operator-1.10.1
subjects:
- kind: ServiceAccount
  name: vault-operator
  namespace: vault-operator
roleRef:
  kind: ClusterRole
  name: vault-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: vault-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vault-operator
  labels:
    helm.sh/chart: vault-operator-1.10.1
    app.kubernetes.io/name: vault-operator
    app.kubernetes.io/instance: vault-operator
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8383
    protocol: TCP
    name: http-metrics
  selector:
    app.kubernetes.io/name: vault-operator
---
# Source: vault-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault-operator
  labels:
    helm.sh/chart: vault-operator-1.10.1
    app.kubernetes.io/name: vault-operator
    app.kubernetes.io/instance: vault-operator
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vault-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault-operator
        app.kubernetes.io/instance: vault-operator
    spec:
      initContainers:
      containers:
        - name: vault-operator
          image: "ghcr.io/banzaicloud/vault-operator:1.10.1"
          imagePullPolicy: IfNotPresent
          command:
            - vault-operator
            - -sync_period
            - 1m
          env:
            - name: WATCH_NAMESPACE
              value: 
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: vault-operator
            - name: OPERATOR_LOG_LEVEL
              value: debug
            - name: BANK_VAULTS_IMAGE
              value: "ghcr.io/banzaicloud/bank-vaults:1.10.1"
          ports:
          - containerPort: 8080
          - containerPort: 8383
          livenessProbe:
            httpGet:
              path: "/"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: "/ready"
              port: 8080
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
      affinity:
        {}
      serviceAccountName: vault-operator
      terminationGracePeriodSeconds: 10

---
# Source: raw/templates/resources.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: raw
    chart: raw-0.2.3
    heritage: Helm
    release: vault
  name: vault
---
# Source: raw/templates/resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: raw
    chart: raw-0.2.3
    heritage: Helm
    release: vault
  name: qa-qkm-vault-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault
  namespace: qa-qkm
- kind: ServiceAccount
  name: vault
  namespace: qa-qkm
---
# Source: raw/templates/resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: raw
    chart: raw-0.2.3
    heritage: Helm
    release: vault
  name: vault-secrets
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - '*'
---
# Source: raw/templates/resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: raw
    chart: raw-0.2.3
    heritage: Helm
    release: vault
  name: vault-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-secrets
subjects:
- kind: ServiceAccount
  name: vault
---
# Source: raw/templates/resources.yaml
apiVersion: vault.banzaicloud.com/v1alpha1
kind: Vault
metadata:
  labels:
    app: raw
    chart: raw-0.2.3
    heritage: Helm
    release: vault
  name: vault
spec:
  auditStorage:
    accessMode: ReadWriteOnce
    enabled: false
    size: 10Gi
    storageClass: null
  bankVaultsImage: banzaicloud/bank-vaults:latest
  config:
    api_addr: https://vault.qa-qkm:8200
    cluster_addr: https://vault.qa-qkm:8201
    listener:
      tcp:
        address: 0.0.0.0:8200
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    plugin_directory: /vault/plugins
    storage:
      file:
        path: /vault/file
  existingTlsSecretName: vault-tls
  externalConfig:
    auth:
    - roles:
      - bound_service_account_names:
        - quorum-key-manager-quorumkeymanager
        - vault-secrets-webhook
        - vault
        bound_service_account_namespaces:
        - qa-qkm
        - qa-qkm
        name: quorumkeymanager
        policies:
        - quorumkeymanager_keys
        - quorumkeymanager_secrets
      type: kubernetes
    plugins:
    - command: quorum
      plugin_name: quorum
      sha256: 47c80d64e72ca0252b40baeb508b7c61692dc031b103bada20595a35108df12f
      type: secret
    policies:
    - name: quorumkeymanager_keys
      rules: path "quorum/*" { capabilities = ["create", "read", "delete", "update",
        "list"] }
    - name: quorumkeymanager_secrets
      rules: path "secret/*" { capabilities = ["create", "read", "delete", "update",
        "list"] }
    secrets:
    - config:
        force_no_cache: true
        passthrough_request_headers:
        - X-Vault-Namespace
      description: QKM key storage gateway
      path: quorum
      plugin_name: quorum
      type: plugin
    - description: QKM secrets
      options:
        version: 2
      path: secret
      type: kv
  image: vault:1.8.2
  serviceAccount: vault
  serviceMonitorEnabled: false
  serviceType: ClusterIP
  size: 1
  unsealConfig:
    kubernetes:
      secretNamespace: qa-qkm
    options:
      preFlightChecks: true
  vaultAnnotations:
    type/instance: vault
  vaultConfigurerAnnotations:
    type/instance: vaultconfigurer
  vaultContainerSpec:
    lifecycle:
      postStart:
        exec:
          command:
          - /bin/sh
          - -c
          - setcap cap_ipc_lock=+ep /vault/plugins/quorum
  vaultInitContainers:
  - command:
    - /bin/sh
    - -c
    - |
      wget -q --header='Accept:application/octet-stream' \
        $PLUGIN_REPO/releases/download/$PLUGIN_VERSION/$PLUGIN_FILE \
        -O "${PLUGINS_PATH}/${PLUGIN_LOCAL_FILE}"
      chmod +x ${PLUGINS_PATH}/${PLUGIN_LOCAL_FILE}
      echo "${PLUGIN_VERSION}/${PLUGIN_FILE} downloaded"
      echo "File at ${PLUGINS_PATH}/${PLUGIN_LOCAL_FILE}"
    env:
    - name: PLUGIN_VERSION
      value: v1.0.0
    - name: PLUGIN_FILE
      value: quorum-hashicorp-vault-plugin
    - name: PLUGIN_LOCAL_FILE
      value: quorum
    - name: PLUGIN_REPO
      value: https://github.com/ConsenSys/quorum-hashicorp-vault-plugin
    - name: PLUGINS_PATH
      value: /vault/plugins
    image: alpine:3.13
    name: quorum-plugin
    volumeMounts:
    - mountPath: /vault/plugins
      name: vault-plugin
  volumeClaimTemplates:
  - metadata:
      name: vault-file
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: vault-plugin
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  volumeMounts:
  - mountPath: /vault/plugins
    name: vault-plugin
  - mountPath: /vault/file
    name: vault-file

---
# Source: postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.9.5
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/managed-by: Helm
  namespace: qa-qkm
type: Opaque
data:
  postgresql-password: "MTIzNDU2Nzg5MA=="
---
# Source: postgresql/templates/tls-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-postgresql-crt
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.9.5
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIRENDQWdTZ0F3SUJBZ0lSQUo1OExJRE9tZXJxczNzWHQvNW02SEV3RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQXhNTmNHOXpkR2R5WlhOeGJDMWpZVEFlRncweU1URXdNVE14TmpVMU1qbGFGdzB5TWpFdwpNVE14TmpVMU1qbGFNQmd4RmpBVUJnTlZCQU1URFhCdmMzUm5jbVZ6Y1d3dFkyRXdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRE1jcTlJRWtRWXIwRUtmTFlqTnlXNGhEbXFsZ1RuaWVEQW5iSzAKeW9KNEgwNy9PZmhTUkUxd3l2UHdHU1NhajNUM1dmV3NMOXpybHcvVTloL1VQYmZrRk8xM0FyTlo0WWlTdGQ1SQovcWVPUGJqdlE4aGdzZVA0YzFQTVhOSkFyTk5EMzJ1Q0FPQkRtZTB1eU5MZ01INFFtTnF5bmxUKytkQ09DUEdECkcyMkZEV2g4RjIwSWxtVzAwNWRIWnJBUUV1dVR2OWVFbXhLOHdnOFdFcThRTUVWeGxTS2VBWXRnUUxOWGxrTWEKcVkzVHFBNnRJcUUrT21ZMUR5TS92NFNQYnoyVGdzNXNkUUh0NDRHcENDWjE0MHQ3SGQ5TmM4OEIyZEt5SWlBNwpabzVxU0l4ZmdKTzEwNGdmSWZydEZBMkdITGxQNEZKV0tvTkVQa0t5VEJaNjBYNlhBZ01CQUFHallUQmZNQTRHCkExVWREd0VCL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVhVjM5UHU1Yml1a1hyVlNYR0xkMnduUkUxajB3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEZ3hBRU54c0JpbTNTWGRmRTVzbS9RMjA1eUw1UHpPT3lybTF6UzU3M1FMCmlxZXd4c3RqbG9tZU1sZjUvMkJsVnEvTmxucjNiNGdIT2svMS9ZNjZnMnZ1QWJ0aThMSytjdDd2NFVsUDVLaEIKaFJHek94elAyM3Ava0dnN25BUGhaSm81TjUydmZoKzlLYjd2ZFNYWmpNbGVGekxLVVZ0UVNTYnptMlo3S2pwUApnN0lHSmtva0YrT2lsQ2N1cTFOTEJGSEZiMnlWc2h2NnpNbVlPT1pITWszWU9zYXlzOTE4Um9GRU5CNG1WdWxJCm5TTWI1aVF6RzZ6Y3lybGxYdlFUcURBWXdFOVFLR1ZuTlJYeTFzdkZGTmJnSmtiL1I2WTZ2a2ZJQk9aSEQwQlUKZkVscXRVUlhZMmFWSUlhblNCWHJUeXhIWmxsQWpKZXYrcndYMWk3bWRIRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVDakNDQXZLZ0F3SUJBZ0lSQVBWZGZPc3BFRDVQSXBVZkp5MjJpN1F3RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQXhNTmNHOXpkR2R5WlhOeGJDMWpZVEFlRncweU1URXdNVE14TmpVMU1qbGFGdzB5TWpFdwpNVE14TmpVMU1qbGFNQjR4SERBYUJnTlZCQU1URTNCdmMzUm5jbVZ6TFhCdmMzUm5jbVZ6Y1d3d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDOHNZdkZkWjg1RTNjZlRyT0ZHekxOaXZTUWo1MTMKVGY0T2JyLzlBbjFnSkFFU295T1dlUmxxd1h3c2tTdUZvRnpyMVlZMzJGb2VGZHJUdGtDdlhwa0FCcDhrYzFaSQpxSnloblBoSWtHZ01reXBlQWE5aExENnY0T1VMWHNCUm9XN2lYcDVqaDFhVXZmSVZGdmVxWGV4QjV1cjV1QjBICjlXQ2ZvTlVPSm4xK2ZOUXBWYVg3d20xOHZHbmNCK0s2TmxRbHJhaS9KZG02cEdrald1a3B3SjZyV1QvWVZWYmIKZzM4OC9OTTNxL0g1N2Ywa3l4MzBtNUljVFZ5a0FEZWJnVmZzUHZHRy9walhSVFFYOWJjWXlhSU9VMk9qUkMyRwpGcjRJSUlySUErSGRjUUpmcUgwY2hiSGRJTlVQaXFUTysvUFpLVHJNT0krNWJjTEpIVVdVVHVNSEFnTUJBQUdqCmdnRkhNSUlCUXpBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVhVjM5UHU1Yml1a1hyVlNYR0xkMgp3blJFMWowd2dlSUdBMVVkRVFTQjJqQ0IxNElyS2k1d2IzTjBaM0psY3kxd2IzTjBaM0psYzNGc0xuRmhMWEZyCmJTNXpkbU11SlNGektEeHVhV3crS1lJcGNHOXpkR2R5WlhNdGNHOXpkR2R5WlhOeGJDNXhZUzF4YTIwdWMzWmoKTGlVaGN5ZzhibWxzUGltQ05Db3VjRzl6ZEdkeVpYTXRjRzl6ZEdkeVpYTnhiQzFvWldGa2JHVnpjeTV4WVMxeAphMjB1YzNaakxpVWhjeWc4Ym1sc1BpbUNNbkJ2YzNSbmNtVnpMWEJ2YzNSbmNtVnpjV3d0YUdWaFpHeGxjM011CmNXRXRjV3R0TG5OMll5NGxJWE1vUEc1cGJENHBnaE53YjNOMFozSmxjeTF3YjNOMFozSmxjM0ZzTUEwR0NTcUcKU0liM0RRRUJDd1VBQTRJQkFRQXZjSHdXQmNkM3lZVWo0K3dSaWh3N3QzSlgxbW5kZnpKbnByYmcrSDNzMVJVOQpSdGlGZ1FtRzBmRjI4NjlhMnpSRlE2TEt0UWxMZTY5VW1MWHIyYmlicWJ3TWdqa3NtNUR0R3ZIeEhhR3BLWDcxCkU4aHVnZE0wS3IyYmtUV1hFazJQditGQW1IOEFxc0RpaEJKS0g5VXhybkV3R3RaOFpWcWhFWEhCaTJGUlorT1kKVllEL1d1aE9oRWVrREJlSDV5ZzI3SEZyUERHQWJoY0h1VW5vVHZtRWhqQjlSUFB4eHlmN3k4VUZVWFVQK1pSZgpvMGZhaVF0bytnRFd2ekFGbjRJejJwZGthL1hzTGcwVGs4TXRhanJrS0RlbnRJSTRuZjZuWkF0eUp0WFlIYlR5ClFidDhjWFhkZDV2bVZ5aDRDYlJweExjVlZnQmQyOG02Q2o0STZiRHEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdkxHTHhYV2ZPUk4zSDA2emhSc3l6WXIwa0krZGQwMytEbTYvL1FKOVlDUUJFcU1qCmxua1phc0Y4TEpFcmhhQmM2OVdHTjloYUhoWGEwN1pBcjE2WkFBYWZKSE5XU0tpY29aejRTSkJvREpNcVhnR3YKWVN3K3IrRGxDMTdBVWFGdTRsNmVZNGRXbEwzeUZSYjNxbDNzUWVicStiZ2RCL1ZnbjZEVkRpWjlmbnpVS1ZXbAorOEp0Zkx4cDNBZml1alpVSmEyb3Z5WFp1cVJwSTFycEtjQ2VxMWsvMkZWVzI0Ti9QUHpUTjZ2eCtlMzlKTXNkCjlKdVNIRTFjcEFBM200Rlg3RDd4aHY2WTEwVTBGL1czR01taURsTmpvMFF0aGhhK0NDQ0t5QVBoM1hFQ1g2aDkKSElXeDNTRFZENHFrenZ2ejJTazZ6RGlQdVczQ3lSMUZsRTdqQndJREFRQUJBb0lCQUMvTTRsV0JPSGFqQWJoQwpuYU9JZ2xRamNWVDFyTFErWTYrUVNyNXpWUU4zMjNXM01ocTZUc0FHaDhoYWRpWUJ1OGhhYlFmVW5PK21KYXNnCkxqNit2ZytObmQ4RUFNV2pRUnFId3pYT3J5MFFVdGxCb0FZRHlWV1FxVFU2S1lvRVZTeXZQM3lER21IUHhIV24KUGRKQXZNcnREblY0T0pKOWpKNmpoWlZ5RnJSbHh4Q0YvRnZTaDFjeGlZWFlLUTdSOUpEQUdQemM3dW5NaXZSWAp3ZEtUMElRU0Y2UXF5cVJBNGxGT2ZiWEc4VFpUNXdHc0wzT1pKU3VidHpVd3N4TVl3N2VqRHk5YnJDaGIwdUlwCjYvSmNkcnlGMnZ5cjRDb1g5bFZvTGcvNmxZRUc4R0RIUTAzMnRQckJPSlo0MGNvRktmMnNYY2creGk1bE1VQk0KK1d5c2lORUNnWUVBeDM0RThRdXlYdXRpUThJc0VSNnRxNWJvOE9LWityZWFrQWNnTWI2bW9sVmV2eENPMFVUSwp4TWZSZzJMYkprUUgzQzBsais4WjFnRWs5OTJZazlGcXQ2YituRGc0Nm50K1B0cmgzd3R6dHVWbDVhRm51UVBZCkpraG92Y2RFVVh2TzMyUDJMMTdWb0QyOHNycUNjYzJINkl2RTNvZmpSSWhxVHhHN2FKUzIyY3NDZ1lFQThpUjMKMUNhRENrRW56cllCTnArSEFLZmNsNWFpVTJ1WDRrbHQ2R0wzSnA1cFdHQmRDYWl0ZG91N09ZK1o4cFJydEtKYgpUbTc0SGN0a2pKc2JmaHRDeHFEOHdEanNxMzFzYktaaDdhS3ZqWFFxMXdDZFFIT3ZyTnBiQXkrTmpNOWFvTy9NClJQYXQ1VUN0OFl4dDM2SVZGck00RlVPOUYrcjhmTnBLRHk0UjVEVUNnWUVBcDlzNWZUbENWT3ZxT3VsZSt1aTkKYU93S0JPWW1lZmVUYmkwUXdjcVJtM1lKeXVxN3dRb0pNNXFPaCtiZVQweGU4THhzSnJnaEhSakphbVppdzc0cAo5VzNtUHJ4djU1MFJsUUhIbkUyZWgvNXR4dElRM0hTSG8yNjU4eldBSHEvMldiRmFySEUzZnlWemFVL1dBcnZWCjU2M3pjT3NXSjh4QTUxY2NRZHNnSUJFQ2dZQS9CMVVWcU95bEo2Nlg5UEk5NktwNGRqbEtVQkJ5ekdmZHBDVnkKdndmOFNuRzdhbUh0V0xYR1RMcndVYnZOMCtweE8yMnU3ZDJ4eTdhaGp1SktJZ2h3c1lqNDlCaE96emdBMUJKYgppK1JNV3Jlbi9XWHhWK3ViZjc3L0JrcS9JMTVBMUFxRXpQMFkxb3d3ZXRCQ3pPcldYTkkxWHN1Q3hVenhwdFJ1ClBSeTFIUUtCZ0MwWDMvSWluT1lyYjFmV3VSZjNmTEJCK1lmTUlSN0l5UkVVS0I1cU81cVE0MWZYYmNKcUp2YmYKU2QzUHpIQmU2ZjFGSmtZSUVjZFdIZ3gwVVpqUHpSZzc4dHRPSXpyUTJkbDVabFFIYXN2TEdOMkRRcWxBY2VidApLOWorZlo0TGdhb094bDVSNUc1OHYrZ3lKOWUrMmg5TjVRYTJHMW5xbitQWlBRT3UyZERlCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
---
# Source: postgresql/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-postgresql-init-scripts
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.9.5
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/managed-by: Helm
  namespace: qa-qkm
data:
  10_setup.sql: |
    CREATE DATABASE testDb;
    BEGIN;
    CREATE TABLE IF NOT EXISTS secrets (
        pk SERIAL PRIMARY KEY,
        id TEXT NOT NULL,
        version TEXT NOT NULL,
        store_id TEXT NOT NULL,
        disabled BOOLEAN default false,
        tags JSONB,
        created_at TIMESTAMPTZ DEFAULT (now() at time zone 'utc') NOT NULL,
        updated_at TIMESTAMPTZ DEFAULT (now() at time zone 'utc') NOT NULL,
        deleted_at TIMESTAMPTZ,
        UNIQUE(id, version, store_id)
    );
  
    CREATE TABLE IF NOT EXISTS keys (
        pk SERIAL PRIMARY KEY,
        id TEXT NOT NULL,
        store_id TEXT NOT NULL,
        public_key BYTEA NOT NULL,
        signing_algorithm TEXT NOT NULL,
        elliptic_curve TEXT NOT NULL,
        tags JSONB,
        annotations JSONB,
        disabled BOOLEAN default false,
        created_at TIMESTAMPTZ DEFAULT (now() at time zone 'utc') NOT NULL,
        updated_at TIMESTAMPTZ DEFAULT (now() at time zone 'utc') NOT NULL,
        deleted_at TIMESTAMPTZ,
        UNIQUE(id, store_id)
    );
  
    CREATE TABLE IF NOT EXISTS eth_accounts (
        pk SERIAL PRIMARY KEY,
        address TEXT NOT NULL,
        store_id TEXT NOT NULL,
        key_id TEXT NOT NULL,
        public_key BYTEA NOT NULL,
        compressed_public_key BYTEA NOT NULL,
        tags JSONB,
        disabled BOOLEAN default false,
        created_at TIMESTAMPTZ DEFAULT (now() at time zone 'utc') NOT NULL,
        updated_at TIMESTAMPTZ DEFAULT (now() at time zone 'utc') NOT NULL,
        deleted_at TIMESTAMPTZ,
        UNIQUE(address, store_id)
    );
  
    CREATE TABLE IF NOT EXISTS aliases (
        pk SERIAL PRIMARY KEY,
        key TEXT NOT NULL,
        registry_name TEXT NOT NULL,
        value TEXT NOT NULL,
        UNIQUE(key, registry_name)
    );
  
    COMMIT;
---
# Source: postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.9.5
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: qa-qkm
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: postgres
---
# Source: postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.9.5
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: qa-qkm
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: postgres
    role: primary
---
# Source: postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.9.5
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: qa-qkm
spec:
  serviceName: postgres-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: postgres
      role: primary
  template:
    metadata:
      name: postgres-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.9.5
        app.kubernetes.io/instance: postgres
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: postgres
                    app.kubernetes.io/component: primary
                namespaces:
                  - "qa-qkm"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r185
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          command:
            - /bin/sh
            - -cx
            - |
              chown 1001:1001 /bitnami/postgresql
              mkdir -p /bitnami/postgresql/data
              chmod 700 /bitnami/postgresql/data
              find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name "conf" -not -name ".snapshot" -not -name "lost+found" | \
                xargs chown -R 1001:1001
              chmod -R 777 /dev/shm
              cp /tmp/certs/* /opt/bitnami/postgresql/certs/
              chown -R 1001:1001 /opt/bitnami/postgresql/certs/
              chmod 600 /opt/bitnami/postgresql/certs/tls.key
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
            - name: dshm
              mountPath: /dev/shm
            - name: raw-certificates
              mountPath: /tmp/certs
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
      containers:
        - name: postgres-postgresql
          image: docker.io/bitnami/postgresql:11.13.0-debian-10-r25
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "testDb"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "yes"
            - name: POSTGRESQL_TLS_PREFER_SERVER_CIPHERS
              value: "yes"
            - name: POSTGRESQL_TLS_CERT_FILE
              value: /opt/bitnami/postgresql/certs/tls.crt
            - name: POSTGRESQL_TLS_KEY_FILE
              value: /opt/bitnami/postgresql/certs/tls.key
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: "100"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=testDb" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=testDb sslcert=/opt/bitnami/postgresql/certs/tls.crt sslkey=/opt/bitnami/postgresql/certs/tls.key" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
              readOnly: true
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: custom-init-scripts
          configMap:
            name: postgres-postgresql-init-scripts
        - name: raw-certificates
          secret:
            secretName: postgres-postgresql-crt
        - name: postgresql-certificates
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"

---
# Source: quorumkeymanager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quorum-key-manager-quorumkeymanager
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: quorumkeymanager/templates/manifests-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: quorum-key-manager-quorumkeymanager-manifests
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: quorum-key-manager
    meta.helm.sh/release-namespace: qa-qkm
type: Opaque
stringData:
  manifests.yaml:
    "- kind: Node\n  name: quorum-node\n  version: 0.0.0\n  specs:\n    rpc:\n      addr: https://quorum1.ops.consensys.net:8545\n    tessera:\n      addr: https://quorum1.ops.consensys.net:8545/tessera\n- kind: Node\n  name: besu-node\n  version: 0.0.0\n  specs:\n    rpc:\n      addr: https://besu1.ops.consensys.net:8545\n- kind: Node\n  name: geth-node\n  version: 0.0.0\n  specs:\n    rpc:\n      addr: https://geth.ops.consensys.net:8545\n- kind: Role\n  name: anonymous\n  specs:\n    permission:\n      - \"proxy:nodes\"\n- kind: Role\n  name: guest\n  specs:\n    permission:\n      - \"read:*\"\n- kind: Role\n  name: signer\n  specs:\n    permission:\n      - \"read:*\"\n      - \"sign:keys\"\n      - \"sign:ethereum\"\n- kind: Role\n  name: admin\n  specs:\n    permission:\n      - \"*:*\"\n- kind: HashicorpSecrets\n  version: 0.0.1\n  name: hashicorp-secrets\n  specs:\n    mountPoint: secret\n    \n    address: https://vault.qa-qkm:8200\n    \n    tokenPath: /vault/token/.agent-vault-token\n    namespace: ''\n    CACert: /vault/tls/ca.crt\n    clientCert: /vault/tls/client.crt\n    clientKey: /vault/tls/client.key\n    skipVerify: true\n- kind: HashicorpKeys\n  version: 0.0.1\n  name: hashicorp-keys\n  specs:\n    mountPoint: quorum\n    \n    address: https://vault.qa-qkm:8200\n    \n    tokenPath: /vault/token/.agent-vault-token\n    namespace: ''\n    CACert: /vault/tls/ca.crt\n    clientCert: /vault/tls/client.crt\n    clientKey: /vault/tls/client.key\n    skipVerify: true\n- kind: LocalKeys\n  version: 0.0.1\n  name: local-keys\n  specs:\n    secretstore: HashicorpSecrets\n    specs:\n      mountPoint: secret\n      \n      address: https://vault.qa-qkm:8200\n      \n      tokenPath: /vault/token/.agent-vault-token\n      namespace: ''\n      CACert: /vault/tls/ca.crt\n      clientCert: /vault/tls/client.crt\n      clientKey: /vault/tls/client.key\n      skipVerify: true\n- kind: Ethereum\n  version: 0.0.1\n  name: eth-accounts\n  specs:\n    keystore: HashicorpKeys\n    specs:\n      mountPoint: quorum\n      \n      address: https://vault.qa-qkm:8200\n      \n      tokenPath: /vault/token/.agent-vault-token\n      namespace: ''\n      CACert: /vault/tls/ca.crt\n      clientCert: /vault/tls/client.crt\n      clientKey: /vault/tls/client.key\n      skipVerify: true\n      \n"
---
# Source: quorumkeymanager/templates/oidc-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: quorum-key-manager-quorumkeymanager-oidc-certs
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: quorum-key-manager
    meta.helm.sh/release-namespace: qa-qkm
type: Opaque
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGL1RDQ0ErV2dBd0lCQWdJVVNkNTJQNTVVbURKVUFnOEV3VWlCQXltNTNuMHdEUVlKS29aSWh2Y05BUUVODQpCUUF3Z1lneEN6QUpCZ05WQkFZVEFrWlNNUTR3REFZRFZRUUlFd1ZRWVhKcGN6RU9NQXdHQTFVRUJ4TUZVR0Z5DQphWE14RWpBUUJnTlZCQW9UQ1VOdmJuTmxibk41Y3pFa01DSUdBMVVFQ3hNYlZHRnVkV3RwSUhSbFlXMGdTVzUwDQpaWEp0WldScFlYUmxJRU5CTVI4d0hRWURWUVFERXhaVVlXNTFhbWtnU1c1MFpYSnRaV1JwWVhSbElFTkJNQjRYDQpEVEl4TVRBd05URXdNakV3TUZvWERUSXlNVEF3TlRFd01qRXdNRm93WnpFTE1Ba0dBMVVFQmhNQ1JsSXhEakFNDQpCZ05WQkFnVEJWQmhjbWx6TVE0d0RBWURWUVFIRXdWUVlYSnBjekVTTUJBR0ExVUVDaE1KUTI5dWMyVnVjM2x6DQpNUXd3Q2dZRFZRUUxEQU1xT2lveEZqQVVCZ05WQkFNTURYUmxibUZ1ZERCOGRYTmxjakF3Z2dJaU1BMEdDU3FHDQpTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFER1ZiTTh2c3c3RjRuMVRRVHowb2xhTnBTaXQyNUdZSVN1DQp4Y0Fqd1pLUit5QVlXWURKTlpoajdrTGR1N21TeS9XTGRCN3p6NzhuVk92N0FKVi9pdTFybmx4UjJ3cFlmSUc3DQpUWThXK3RTNDBVVDU4c01VTVRHbEJ4cFZrL2txSHI1SThLZ3IwUU9vVWNleHJ6RjJEUk16dnFHNXJjUXdNZHQzDQpFWE5zbXBzeDhiUlZjTElxQnNKTGVMZTFwZm9GcXo4UnFmd3pxUkcwVjhTSHBYY0x3Z1pLVE1iWXFGQnptRks1DQpKc21IMDh3WndnQTZPZG9aWGJBUytMeWFLWU54ZUJDRGhUbmxPQjRKNFllenE0ZDU1RXZNUnB0MTd0T1VXUDJCDQo2bnA2VzRDQzB4VEFTZWs1eDNUSkJDUVpSenMvNUlXT1RHS2VZTnBqb2R0R0RUcURKNjRkbTFkRGlLbEwrSGcxDQp4cHB3Z292U051alRzcFpZTSsrbWVPZ1JwMEdpeEtmZTh6S3FHVXlkRXFlclU3emNBdDVUL1R2L3prdHgxazZJDQovTlYvSE9aNlBkdE5KeW1uUUxFWHBZUEV6Szk2dFJ5cmVNeEp4QW11RENPdkFkeXg4T2xPV0hlVVh0SVhyMFcvDQp0dDMzWEFraU1ONGRQdjJ3eFZHNnZ5VTF2N1BwSkplN2JGM1hXbzQ4b01kbGhBeTRQb1g0ZjlHTmozcmNSMitkDQpKcS9YWXdxNjZLcjZBY0FsRHBoMXdaczlUbTZKbGM0Ykkra3BCaEhUQ0kyM2xCNVJuUnlNQ2ozZGx1aEE4NkxvDQpSRE8wVENPVFlzVkVTZmhPd2d1R1Y2bEtUMUIzOTVpazB2bm9aSlhocWpYK3RkR0JMMEtuSVFZREVwS3N0VzdIDQpxalNsc09DWXlRSURBUUFCbzM4d2ZUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCDQpCUVVIQXdJR0NDc0dBUVVGQndNQk1Bd0dBMVVkRXdFQi93UUNNQUF3SFFZRFZSME9CQllFRktuOEs1R0wybk8wDQowTHVPeWhleE55a1pOdTdkTUI4R0ExVWRJd1FZTUJhQUZCcmRneTZzNTBYcVc4TVNPYzhaaEZ6ZkpDM0xNQTBHDQpDU3FHU0liM0RRRUJEUVVBQTRJQ0FRQmRKNnd6ZTV4a2xScHJTa0FHb1pZc0xrOStiK1V1WnNkcG1YZGJVRnRRDQppSFFOOXpCVmk1YnUxTlljMmhKWDRsQ0dnNEZmUlliV2szcVlUMm1heXVKZVY1VUZOamZVV2Mxa051NzdrNjNODQp0VkU2ZjF2dmM3NjcrSCtOZ0IzWTRkRUVFVTNyRDhWYmdDOUF2SWhaMUwxVnRlREtqSG1PK3Q2RzVZTnFpaVV2DQpUT0dGaHZtSUQrWWlhWVdUYlloUnVJVEV2bjNuOHAwMkVqNVNrbzRIcnNxRnRNTzVDSjlsSXdtWmptNFpjVEJlDQpUcDRxcERsMFhHcUpoNHdpd25jTXAvN0pWV1ZOZWFaVldhcTRveXRpRWNHYXhXNkdRZWNRQi9jMmRpTEdkZkhUDQpWUGpLTFJmcTVJZWQ2b0JSUGxRRXpVWGlYV2ttazh3TEdiWkcrWHJrRklveVJiUzVkcXRMUXNOalR1T0pxOW9PDQplN3JCQjVmZEw2OFU0ZEQxY21naDlocC9BZVg2cUovMFNmWnF3U3h0U3orUjlhUW5TVk9VeUpyUTZYVmhUOGdKDQp0RFRERHM0RG5GV09RUG4xYnpYM1A2UU9hck91S3VyeXFkUGh0bHVsOGxpV1NNbWc3M2pqMzZrSjNkQkt0d3gxDQpLNkk4am5wSkdkMUptcmp3bmhNOG1HSlZUeDgxRXA1SWdLMTVHOGEwZmNmUkVvRS9qYmJpOGMrVGkxY2tKVk1XDQpqTWZadE1DcGo1SjkyUUNIZHVEOVZDZStybCtqbXpaekl4Tk9ucm5RM2czQWsvd0pURGxoeGRPbVFYZWNUNkJHDQpBSjVMbTlzZzVsZHlGQUxaMWZWenNSdjNRZ1ZpUlMzRTBtcHJtRnV1R1NRY2tzOE5VTDVRNVMrZndnTnFVVVZhDQppUT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQo=
---
# Source: quorumkeymanager/templates/postgres-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: quorum-key-manager-quorumkeymanager-postgres-certs
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: quorum-key-manager
    meta.helm.sh/release-namespace: qa-qkm
type: Opaque
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEdFRDQ0FwMmdBd0lCQWdJVUxpdGM3bWRTTnpsWVloZWY0WmZLbDNFbGFqSXdEUVlKS29aSWh2Y05BUUVMDQpCUUF3YWpFTE1Ba0dBMVVFQmhNQ1EwZ3hEVEFMQmdOVkJBZ01CRlpoZFdReEVUQVBCZ05WQkFjTUNFeGhkWE5oDQpibTVsTVJJd0VBWURWUVFLREFsRGIyNXpaVzVUZVhNeEVUQVBCZ05WQkFzTUNGQnliM1J2WTI5c01SSXdFQVlEDQpWUVFEREFsc2IyTmhiR2h2YzNRd0hoY05NakV3T1RBeU1URXlOelE1V2hjTk1qSXdPVEF5TVRFeU56UTVXakJxDQpNUXN3Q1FZRFZRUUdFd0pEU0RFTk1Bc0dBMVVFQ0F3RVZtRjFaREVSTUE4R0ExVUVCd3dJVEdGMWMyRnVibVV4DQpFakFRQmdOVkJBb01DVU52Ym5ObGJsTjVjekVSTUE4R0ExVUVDd3dJVUhKdmRHOWpiMnd4RWpBUUJnTlZCQU1NDQpDV3h2WTJGc2FHOXpkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFNeFBYVHR5DQowVW5yREpRZW4wNjdvOXp1SU5wdHlZYzk2bXNxNzQ5UzErK280VG5qRmxsc0tuTXgrOWYrQjMzdEtYNkpzd1FXDQpaNWs3ZzlBd1VTV1lNbmpxQm5ySGIrNDE2WGR5Vjhhdi9ReUpyTFhhQTdWaFFhUDBuNW9jNENJYmJmaEE2S1k3DQp0NU85K1dXUmhBcDVyOFFWSzJ0YTRrdlZoQ2J6M2lHL3hSOU5rcTNzektrUEJnS2RrMFRWVkttVDd3ZjBTTHk1DQpLT3dadkNTU2NXOFRsdk5KektzZ1lhbHM5c0ZvQzh0NDBXbSs3RG5OeDBuMFkzTmNQNStrdFZWQSt1dlh3SUErDQplcS9xQVpMSW44djRhWkFDOFd3S0dUeU9RSC8zOTNsM0J2U3lUR2tlNExIMmdkQ0FFenJYQ1VjWTRVQklrS2xpDQpFaG9OclVsbnRRUkljRWNDQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFRkcxZklVY3hoZWpERjRvYUh0YU43UHdlDQpWSlhLTUI4R0ExVWRJd1FZTUJhQUZHMWZJVWN4aGVqREY0b2FIdGFON1B3ZVZKWEtNQThHQTFVZEV3RUIvd1FGDQpNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIU2NuRzVqVmVPQnZ0NU9KU0hKQkNnVTREWGZKV3BnDQpRaTVSemtueVBnY2VTRzJZUUh0ZXVLME9ObjVKbThwV3hzc3NVY3NxbFhzb3NTcktENk9FUFBPN1lIbHZaWDhJDQpoZUZQRHBZMThxTzdnd1NFVnRoZ2hRSi9qM1pPTG5KZS9YU0E3SlpQbFNxdC9CZXQxM0ZYRSttKzFYMUQrT0dUDQpWNFN2ZUxXbldrcWh5MWxXTHBXOStldHZDbXNvRzFaVklNb3ZXV2IzRjVjdjdBa0ZmTFpOc28zRk5TVXpNMnRUDQo2bDA1RkhyZ0kzVkRaM1JvL0paMFVrVnVIZ0xyS3FpajBYbGd2Yi9XZWJlYW5CQmYyYTNKM2o5djVuS0FVbGxpDQpBNHRxWEgwSlFpM1FMMWtYeUZoaTRFOXo3QWdkWnBNRVErbDNuNjN0aDVFQ1h1TWFhL05rem1FPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0K
  client.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEV3pDQ0FrTUNGRlZPQ3ZNOHQyeWhwYlNUb1V3dkVYRENrTFN4TUEwR0NTcUdTSWIzRFFFQkN3VUFNR294DQpDekFKQmdOVkJBWVRBa05JTVEwd0N3WURWUVFJREFSV1lYVmtNUkV3RHdZRFZRUUhEQWhNWVhWellXNXVaVEVTDQpNQkFHQTFVRUNnd0pRMjl1YzJWdVUzbHpNUkV3RHdZRFZRUUxEQWhRY205MGIyTnZiREVTTUJBR0ExVUVBd3dKDQpiRzlqWVd4b2IzTjBNQjRYRFRJeE1Ea3dNakV4TkRFeE9Gb1hEVEl5TURrd01qRXhOREV4T0Zvd2FqRUxNQWtHDQpBMVVFQmhNQ1EwZ3hEVEFMQmdOVkJBZ01CRlpoZFdReEVUQVBCZ05WQkFjTUNFeGhkWE5oYm01bE1SSXdFQVlEDQpWUVFLREFsRGIyNXpaVzVUZVhNeEVUQVBCZ05WQkFzTUNGQnliM1J2WTI5c01SSXdFQVlEVlFRRERBbHNiMk5oDQpiR2h2YzNRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURLeEdyb0plaVpMQytDDQpHTEtBWVVhbHdoYzJ2YkdPYU54bzlWNFRzL3BBSkxSa3Boc0V5NDFGZXNZS3RWZ3FwOWRwN3g2OWNBcStOSzZNDQp2TkpYQ3N6eUl1MGdnRXlOby9QQ3hqZnhkMTJKdFhjbk1laklVNFd4ZWpDTlRUSEF3ZjVEb0RoMFlKeE1rTHF2DQpmTlVtMEsvSjI5Nk93ZlVWMWVXMkp5OEFMcGpHdDVmdGZTSG41anBLbkNxbHFYRWhCTkhPU1FmR3YrWnIxVFViDQo0TEpKUG13R1hWM05iOVVGQXUyNkk0NlhnMzJvUVdDS1hDNi9MU2NrVitzaFBEZzVZWmhUOVM3KytCSXNIY3hxDQovYSs2TnRyTDVBTGFMb3ZkbW5nbS93bXFUUmhsdkR2eWtOVTFKT3ZUa2g4WCtOTEIrejVObkxMc2NvY2tvc09mDQpOTjdOQ1B0WEFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJVa2xBZ2Vub3RGMWl1RExSOWphdWprDQpISjVoaU1kNTJQQU9MVFF4M2J3N1N5TVRrZDlpYkZOOGlYTytUeE9YaXlUR2NVbVJYNG1HZVNvTzlTUjFkb1FQDQozMHhVb0ZNWmdmYmFCRzRHaTdnRUtvc0ZRTWloM3B1cVc2T0trek9ISWVubVFBbHo2dnp2eXF6ZElyeUxhZnB4DQp2R09jK0JnSE5ZL1JMMWNnMjlZNlR0Z3Z0aVpERlJUZDZJcm1XZlQ2YllYYWR2NFRHdy9seWFaNXJicEtLay9IDQp1KyttM3hFRXFxV2dxOCtPYkI0UWZGRCtSQkIvdTRTWmRTQ0M1NVBxUEUyZndONnBxN0VzK0Z6RGQ2MDNsNXFtDQpWUC9wNGZkUE9US0tFdmZrZlV0b3M4YmVBeVlDTUpNOWgvTzgzdytxdnFlZGZnMEQzbGRDazlXbEE1UnRINDg9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQo=
  client.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJRXBBSUJBQUtDQVFFQXlzUnE2Q1hvbVN3dmdoaXlnR0ZHcGNJWE5yMnhqbWpjYVBWZUU3UDZRQ1MwWktZYg0KQk11TlJYckdDclZZS3FmWGFlOGV2WEFLdmpTdWpMelNWd3JNOGlMdElJQk1qYVB6d3NZMzhYZGRpYlYzSnpIbw0KeUZPRnNYb3dqVTB4d01IK1E2QTRkR0NjVEpDNnIzelZKdEN2eWR2ZWpzSDFGZFhsdGljdkFDNll4cmVYN1gwaA0KNStZNlNwd3FwYWx4SVFUUnpra0h4ci9tYTlVMUcrQ3lTVDVzQmwxZHpXL1ZCUUx0dWlPT2w0TjlxRUZnaWx3dQ0KdnkwbkpGZnJJVHc0T1dHWVUvVXUvdmdTTEIzTWF2MnZ1amJheStRQzJpNkwzWnA0SnY4SnFrMFlaYnc3OHBEVg0KTlNUcjA1SWZGL2pTd2ZzK1RaeXk3SEtISktMRG56VGV6UWo3VndJREFRQUJBb0lCQVFDMFRKR1BXZDRKRGF3MA0KNzRjUjl1MmVDUWNoU3UzdVpybk9ycGYzeHlxNERLdEhjQmhJWEVPRFM1ZDhBQ0trMDFnTnYyM0RIelMrU3hRRw0KMndQaUdCMkRGYUZyTEFwbVRDbzl3SW9RTVliQUk5Y095Q2Rvc2pRSVMxR080OXhndlY4OWZPT1dRQzNiT3pwMQ0KUHZnK0tvU1ZadWZ3WXZGdWVDTnBwRS83eG5OZEJsOEdvQUdtMGFRNmZoQ0E1MFNodXErayt0TkRIWk1zZVdMYw0KN3lFWFdDNnNCenBmVFozZDZrVmlBbUpIdnlqMTVualpvUFVNZCs1MVNtYXcrSHBpaU9FdlFzN3A0MzBFbnVxNQ0KRzFiYTVOMTJ5T1pKVTVqRUlBQk41U3dzeGRIL09mVUpVVHlTM3BYdTZob0Z3UkFmYUVTb2tKdWFwSjhobG5pNw0KbHdIMDBFNnBBb0dCQVBkdmdOTFRlT2NaNkpjeHFzc3dsd2xyd2hXWS83ZG9FZXl5QldiVUxPdUIvdGE0UkF0Zg0KcjlaSXFVZ1JjeVd3MWIzTlViOFd4eWQ3cnB6MG9qTElGTk9PZkNaUDdyZ20wUXRLL1Znb0REd2VmUkFYcy9kbg0KK2RHOVV1bWZkdmIyYjFuMnhEK2hxa0kvNDhRbTl6MXQxemJpZ0hvMWU2Nk1tSnVuSXA1K0o0bWRBb0dCQU5ISg0KSFNta3lyQThyZ2NXMk9rSWJqdk1YV0R6cytyUEwzUW9RSXN2RjNWMFpIbFcxQTRYR2d3eEVJdGFJZHdTU2xJUA0KcXp1MnFaZnh3YW9ZYWt5R2E0cm0rVHVvR1NodXRIUUZBOXhxNWlVbTVISTRkaEJFZ3NXSWNvZFk5eUNPVS9ucQ0KVGgvZTIzbTFmVHFmZm80T1pwVUVmbXF1L3BIa2duN2UwVGxobHRDREFvR0JBUGEzM01qYkNldk5YcWtiWWdTMg0KajNOYVdpejA0TTI4M0ZxWjYxN3I0MXAweFdqT1ZUTE9GMk5nRWtNRSt6Nnl3MzA4cyswSXhrMnRPcC9RSWNibQ0KMERWZUZwYVJEeVBadUlrOUhiNEFPS3JkYjdCVElpUm9MYVlmMUFPVStLY3BkRUJOR01PbDdFR2d1UGhHTGpLMw0KU21lMGs0ekh0V3FIVUVlcjhJMytsbWZWQW9HQUhKWE0xWG5RN0lhNEo5c2pIMDI0eDRrblNDaXM0VmZ0M1dRRw0KdDNCcFArWG1NdXB6NXArYk93SU1nUkI5QUtHMVlzMGp4ZlV6MHJKc2N5TDBpUXpmNW9ObWZveC9NUlUwbllKNQ0KYmpWYXVzRTc2NXhwNmZtTDRDS2hpSFBFNkxpOEZKZXFvWWthV3RFeUNTVG1kN0RhcFgrQlFrUXFCL01kSFBCNw0KamRnUVZzVUNnWUJBVzhnSUxhbG13WWZXcmRjSzVzdzYrdk9BbVZOYTBwZnA2VVhQaVNTc0RERGNtSnlRS2czTA0KTVMrVTRxakw3UmRjQXZTVE83Z3lrL3lPMnJ6aUlRa2dVTGdxL1dBeklXcDVUVkNQRTZuWUZmMHFSUGRiclM3Ng0KbGRoc0xuc3ZlR0NyOGRvMkFrVm1yL21KcitJd1NPRUNCUXRoTFVxUU1SUEhXR01uYmgzbC93PT0NCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tDQo=
---
# Source: quorumkeymanager/templates/vault-certs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: quorum-key-manager-quorumkeymanager-vault-certs
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: quorum-key-manager
    meta.helm.sh/release-namespace: qa-qkm
type: Opaque
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGd0RDQ0E2aWdBd0lCQWdJVVpHcFJBMzF3OStnVjhKU0M0amszdmZ1M2pqZ3dEUVlKS29aSWh2Y05BUUVODQpCUUF3ZURFTE1Ba0dBMVVFQmhNQ1JsSXhEakFNQmdOVkJBZ1RCVkJoY21sek1RNHdEQVlEVlFRSEV3VlFZWEpwDQpjekVTTUJBR0ExVUVDaE1KUTI5dWMyVnVjM2x6TVJ3d0dnWURWUVFMRXhOVVlXNTFhMmtnZEdWaGJTQlNiMjkwDQpJRU5CTVJjd0ZRWURWUVFERXc1VVlXNTFhMmtnVW05dmRDQkRRVEFlRncweU1UQTVNall4TmpRd01EQmFGdzB5DQpOakE1TWpVeE5qUXdNREJhTUhneEN6QUpCZ05WQkFZVEFrWlNNUTR3REFZRFZRUUlFd1ZRWVhKcGN6RU9NQXdHDQpBMVVFQnhNRlVHRnlhWE14RWpBUUJnTlZCQW9UQ1VOdmJuTmxibk41Y3pFY01Cb0dBMVVFQ3hNVFZHRnVkV3RwDQpJSFJsWVcwZ1VtOXZkQ0JEUVRFWE1CVUdBMVVFQXhNT1ZHRnVkV3RwSUZKdmIzUWdRMEV3Z2dJaU1BMEdDU3FHDQpTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFESFVrZCsxbjIxdnZyd3Exb3pxZkZoeG5qQ1Q4dnpWRGtqDQpEaXhwNzNSQklqQzNoeEJHaG9kRXdsTDJTMEVpaldHcXgwNkw0KzEraS9uVzk2VnNBVTV3WGdWTm9oYmlEcDNnDQpyaHdnRmNZdWxIY0hFVTlWT3A2R3FyZUxFaTZwVjFUQjg4b0twMEs2ME5IYnEvbHdyQUdQbjlGbWVhSzE0L2RKDQpOdXI1VUNQSVdUaUJiQWxFOTdWNVBqNlhXRjNnQkt5Y1hTN2EyS0V0aiswSUVxVExBdEthbkRnYmFtUjN0OG54DQpDeGZ2WDhqbVFEZjFRWFRuN1BDbG1DTWQ2Mzd4VmdpSlRwZ0V5b2QvbC83K2lWdWZNNnNwelR2VVY4bkZ1WVgvDQp0MzRBTWQ4alRLM1B1cFZYUlJIYnoxMjMya0dyTXlhTkRiUnlKbHNpbFNWT0VNd0ppWkJIcDdUTDU4Ti83RUZXDQoxb1dYb0MvRVowR0d4NmlZZ1ViZ09yaTBHKzVIUlVpcGZPOVlGT3BnZmsveWZYaitmbU9Lb09SWmpvZWZzbTFnDQp6NkNrRDlMT01EdFBDSEdubDNCNEU0WjZQTXg2NlJHcDE0MStDbGU1TW1FQVlCUk9CY1ZVOVM0eUxHdHZBK1hzDQp3L0hKTmNYU2xacUFmcHpJOHdoRWozUWpzYkRaZC93U3dYajQ3OXg1ck8zOVJPdHhrTmZKZCt3WHoxUHNGUHBZDQpsdWRqQytmVHA0MnZvQ3IyWWhUVTk5RnNsSlc2cE1qSTRXaUFlYWtBbytrSlVpUXBLdDFYUGNUWTVmSzVwRGZLDQpmeWpKSmxTdDR5WWcyUlgrZU1ld3hZR3B3SUtnZ0RHN092V2U0dDFWWlR4aXdnakpPeUVOb21HNkJOOXBFRms2DQpiNWlsMWVzbHV3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXdBd0VCDQovekFkQmdOVkhRNEVGZ1FVKzNDNlU1UnZUNnF0dnlnMHR1Nndtekt6Vi9Bd0RRWUpLb1pJaHZjTkFRRU5CUUFEDQpnZ0lCQUJkZkZOVjV2eTROcmRLUWQ1NHBGa2tqWlZDZVBSOHl6Ri9jRHE3dVREV2hOT3FjRWFnNDE0T3NMNlhFDQpMR0YxZDg1T2tkZ1h4U1IzOVV5ck5ReWVOZkxPMnBFTnpQVjR6MXlvdU03MnMxZDczVEVMeGhtU0k0Um1hRVlZDQplOVNjQXlJU1hEenJiV0toa01Xc0xyWnBUNXhEUjRoTi9pWUdqYUhMWFpkeEkrWjlvdDZ0bUltS2lGa1ozcXpvDQptRWluTXVYL2NFUVE2UGxva0VBT3NzMktRK2JQNW40bjZNNVNMbDNoSytUbTdOcGVWTGwyNmxKTC9ab3RUNEM1DQpwS2g1Ym5ZelBGNkpveUYwcGpycDJ2SVNjOHhydWs0NHI4ai9CODhJV2UvaUVqUHo4YXFJVEF3aW93NnNsbWI4DQpBM0xSME95WnF4MXdUU0hnaEpHaWhYRXc4WVVlZnNicHhYdk1rZWVPTWFjakV2R3NrWlRuWU1iLzJ6dm1BN1VCDQpEdFVncDNpQ0NTSnM1ei9aVlNHT204WC9ZMEN3aEkrTDEzYk42VjkvSEVpbjNQZ2hGN0dRUHVwSXRqZ1VyWXh3DQo0YXVuM2ZiOVpIcDRTamRnajVDTm5rUklxY2lkaGkvb2I0cE4rMnhYYWxoK1g3ZFJnUklLNW9TbnQzeVNCKzh4DQpXTFBjYkZidGo5dVZGSkpQQVFPd2M0WENwYm1tQjNGL3NBcUFWTHRyeFNFOWtlWm5BQ0w2cGlLUFJacmJlZFEyDQp5dWJMN3FScm5FQ2E1d2xqYnoyc0liYVFadmFobEthTEMwVTNqelU3anM0T3BCRThVNC9pMkRJNlFkZmFBSFliDQpYK0ZTRTZvTUxrUVBDNS9vRFVTWktrcjhTUUptM2o0RndPUnROOTNXMStaK2hZZUINCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJR0ZqQ0NBLzZnQXdJQkFnSVVIMjlYNlRaMHZWSXJpNFE2NHJVbjhNTkRhdEV3RFFZSktvWklodmNOQVFFTg0KQlFBd2VERUxNQWtHQTFVRUJoTUNSbEl4RGpBTUJnTlZCQWdUQlZCaGNtbHpNUTR3REFZRFZRUUhFd1ZRWVhKcA0KY3pFU01CQUdBMVVFQ2hNSlEyOXVjMlZ1YzNsek1Sd3dHZ1lEVlFRTEV4TlVZVzUxYTJrZ2RHVmhiU0JTYjI5MA0KSUVOQk1SY3dGUVlEVlFRREV3NVVZVzUxYTJrZ1VtOXZkQ0JEUVRBZUZ3MHlNVEE1TWpZeE5qUTFNREJhRncweQ0KTWpBNU1qWXhOalExTURCYU1JR0lNUXN3Q1FZRFZRUUdFd0pHVWpFT01Bd0dBMVVFQ0JNRlVHRnlhWE14RGpBTQ0KQmdOVkJBY1RCVkJoY21sek1SSXdFQVlEVlFRS0V3bERiMjV6Wlc1emVYTXhKREFpQmdOVkJBc1RHMVJoYm5Wcg0KYVNCMFpXRnRJRWx1ZEdWeWJXVmthV0YwWlNCRFFURWZNQjBHQTFVRUF4TVdWR0Z1ZFdwcElFbHVkR1Z5YldWaw0KYVdGMFpTQkRRVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFLNk43STdxUXFPbg0KUWU0Q1psRkZ0R2xodzNtKzdXeHdNRTA3a0s1U0U2VDZ0OVNMVVoxcTBEbWFucmI4emlZaFYzc2lqbndhMnFyVQ0KNU0wMmw3K3BkbGhBUDd0WW1WUm1jR3E1cjhRMFdaUzkzZjdUVFpEK1J5OUxrbUNoeEN6c1hpQ3QvSlY1d2xSaA0KSzJ0MytVYkhWZ2dOcDZhd0Y3d2d2T0JCMmplTlF6SVd2TjB6UjgySnhLd3pSbU0wd2RiVU9LVzJCY0pqMXhiUQ0KNnNlZWVWNlpXM3BXN045RHhxa3RSRDlxNHM2MlZ3VGRPTWJXd2huL21BTkMvbDFTNGV4Sm13Z1c4Vjh1ZG5yaw0KVmdaZGZVVGQzejNnZTVrM00vYXdGcU1rdWJleGU2RGtoaTd3YjNMTEtCaEt4ZVpyMFZjSmd0ckkvQm5xcDRrZg0KRGptTGZRb1MrMEpIT1EwTWdmN1NubGQ5Mm8rbFd6UjU2QmN4SFVra1BhRjQ5VlhiM0piR3E3dTlPMjd3Tkc4cg0KdmRVbW5XeEVrOXk1b29BTVpoNHdTbXhEYkRHUm1EMGI2M0c1cU5wZTZZWUJpc21XcEVpVWxNeVhlRUdVZGN5Vw0KWjVGK0plL2xZNXZpSENuVW9DbkY0ZGZpOFc1akZsaUorSXpDNXBjNmpHTUorLzVMOEZCM2lpZzR4SThhbmRrRg0Ka3dZcEZyUkZGMld2SysxajBoMXJlNW8wbC9DQXZRVFZUWFVnN3RlN0tVQ2ptYUduYTJNVFIxWmhzaUNRYnk2Sw0Kb292T2dRTG5wc0pJSDlLTUdNcytpVU9zVXpDWGd6L3JiNGJiT1BPVURhc2wxbU9Ha1pQSlNMNVZpVG83bzlFRg0Ka3c4b3JKakJONGJFT05NdXJkbXAzVjk4UTQvK3YwV1RBZ01CQUFHamdZWXdnWU13RGdZRFZSMFBBUUgvQkFRRA0KQWdHbU1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFTQmdOVkhSTUJBZjhFQ0RBRw0KQVFIL0FnRUFNQjBHQTFVZERnUVdCQlFhM1lNdXJPZEY2bHZERWpuUEdZUmMzeVF0eXpBZkJnTlZIU01FR0RBVw0KZ0JUN2NMcFRsRzlQcXEyL0tEUzI3ckNiTXJOWDhEQU5CZ2txaGtpRzl3MEJBUTBGQUFPQ0FnRUFWLzFZUDdhaA0KaHJXNDVJMis1R25qOVRhQ3k2MDduK3dsOW9ldjI3cGhTNE11TDQ5d095QVJ0S25xQll6d2IySkU1T2F6aDBPQg0Kb2k2T2xqY2t0ZHFnMUo3emFEUDJaaHpRTDJacVNDSFQxUUoyUE5rak52eUpDVTkwQ3cxL3N0NFNsanJYUzlXVw0KQjU2blExR2FMQ3ozdjVlTGl0MEd6a3l0WnlBc2Y5VEIxWTVFOWIwOFVSd0FQN2h6UUJLMk03SWgrTm1hVy9iYQ0KL0c5VjZFeEJLZXVNbkROSXgxWEtTVzZZNnc4QXUxd2xSKzdNMnlsMjJZcnB0NEhyZkJHRnZDemdTbHQxd1pjTA0KMS9hOWptaTd5MjFuQkRoWXl6TnI1NHArSFdIdEhnZGtiNzQzQ1o2NzBhaTF0NUROczBYRUIwTHVXVVhDSlRRQg0KT1kybWMvTU1WeHZtc3hPd1YzdndKUm11SHNnMHpQMnFWYjY2UEVROWo2ZkIwbDVTY25XTzRrbXdJYjBGaGd6OQ0KNUEvVWhuSjEwYzhGZFc5dTIvYjNYS3NVL0RDTU1IcWJQYnNPWmdTTXBVTVltc0tDb090KytiQ0g5WnZ6OVdWUQ0KZDBBNXcrVEZUMmtCYnVCcTJpanJEL2xVUFk4WmJIV054MjZvbktYOFU3OC9FRkN4WWtxeWhZL2QySEMzMkpNdw0KbG9SR1E4WldDV2hsZ1gzU3BlWi9oZDlObDhDK2wvN1dLelRyd3hXeHpFL1V4TzhKbUgyemdWb1hTV08xM0p3Tw0KZnpTSXpicFNOeTRoNW53L2xSRmRMV04ydEluZSt2VEVXNDNQaDA4K1lsUWJoRzNHS0ordW5DaW04ZThPTXFjRw0KMzNDenhSVjdhY044QS9mL0xaaG5tQTVxTlhMVUhtbnp4NWM9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  client.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHVFRDQ0JEV2dBd0lCQWdJVVlsTFkyTmU0dlRlYmNkeHNnanFQR1RETTM0Y3dEUVlKS29aSWh2Y05BUUVODQpCUUF3Z1lneEN6QUpCZ05WQkFZVEFrWlNNUTR3REFZRFZRUUlFd1ZRWVhKcGN6RU9NQXdHQTFVRUJ4TUZVR0Z5DQphWE14RWpBUUJnTlZCQW9UQ1VOdmJuTmxibk41Y3pFa01DSUdBMVVFQ3hNYlZHRnVkV3RwSUhSbFlXMGdTVzUwDQpaWEp0WldScFlYUmxJRU5CTVI4d0hRWURWUVFERXhaVVlXNTFhbWtnU1c1MFpYSnRaV1JwWVhSbElFTkJNQjRYDQpEVEl4TVRBd05URTJORGd3TUZvWERUSXlNVEF3TlRFMk5EZ3dNRm93YkRFTE1Ba0dBMVVFQmhNQ1JsSXhEakFNDQpCZ05WQkFnVEJWQmhjbWx6TVE0d0RBWURWUVFIRXdWUVlYSnBjekVTTUJBR0ExVUVDaE1KUTI5dWMyVnVjM2x6DQpNUlV3RXdZRFZRUUxFd3hXWVhWc2RDQlVZVzUxYTJreEVqQVFCZ05WQkFNVENXaGhjMmhwWTI5eWNEQ0NBaUl3DQpEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTVU1b0hnVUNCTnFSYmxPdWgyTUplNUpQS0tUDQppdGVlZ25lSGlXeUpKUmgzU1owSzJIS2o4Szg4NzFrVlY4dUpUUTQrZmtVTiswYjA2RkQrbUhUS0svWlFiZHRnDQphZnVuUVB5Snc4cTVjelpIY09SWFN1ZWtGczl2cUJDem5WLzdyWVlqTHhGeHozaGM2UHNTZG5veWwwQnZ3eHJZDQpYTkl1RWZnNzdWTzJNanFwQWVrYXIrTVArZzJpdE9OWk1ucmMyT3pmNFZxcXJlRmJDMlBMWXFGNHhPNVE0WS8rDQpJRWdNSkptSEFkSGZ1Z1BTOW9OanhhZ0srdlg1LzRUYWV6VmR6a0crd3ExZDIxWDVwd3hOTElTN0JBd1gxb3pGDQpMUFVTSmJMRS92UFRvMlgzdENUTUdYUlRUOGlMYlZSbVNNV2tBUWJsUHowMGxnV1kvcDc3bEhlaDdSc1NmWUMvDQp3VTMzeVZqcDlHbTg4RGNrVlAzNldOS1oxVFBvSjlRbkNWZW9tNkoxeUIyRVppclk1RlllKzQzRlpjdXBzdEVBDQpTc2hEVjd3Sy9yZmp6YlVCa3JjYlAxNktSRmk2YnB6SU1EQVVrOXZsajd2SXQvWlQ1TGNobSsybXljZyt0ditZDQpVWFVHQS90RXhOSVh4eVpXUFZTK1FONkhPZzdFWENjSk56K2ZycmlHUGE5bzRSbEJMVVNUNkZqaW1jT0d2UHFvDQpEQ2ZiN1gwSlVsWE1BcXNMSHBFYndUMG9yM1Z3NUR1ZncwYnA3UENETXNaR1huZDQ0cldwVTdVQmdSZ0doblBQDQp6NGk0UHlUWGQrY0RlTkdpMmR0cUhyaDFlU2dIanJKRThIdFFxMmg0Y3NxenUxU0E4S2pkK296MWpnRktSK1NVDQo5d3hXbXc3WitUaU9KY3QvQWdNQkFBR2pnY2t3Z2NZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXDQpNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlJqDQpocUorZHV6NUcyMHpHbnI5S00wQzRMRE5lekFmQmdOVkhTTUVHREFXZ0JRYTNZTXVyT2RGNmx2REVqblBHWVJjDQozeVF0eXpCSEJnTlZIUkVFUURBK2dobG9iM04wTVM1bGVHRnRjR3hsTFdOdmJYQmhibmt1WTI5dGdnbHNiMk5oDQpiR2h2YzNTQ0NXaGhjMmhwWTI5eWNJSUZkbUYxYkhTSEJIOEFBQUV3RFFZSktvWklodmNOQVFFTkJRQURnZ0lCDQpBS2pxb1lsSUdnNWhJNHdHWklTTVhaL1AvUk96TkEvUzF3aCtqbDV0N0cyYk4zSnB3UDNIWGNQK1pQTCt2cmQvDQp2QkhjZmJ6MXBXV29wUXJqSXRZUW8xL2dsVDE1OWtmNFIzRWJLTEcvVFFxOWl2MVpTbytpN2VJSzdGQnVyc1o0DQprSG9TbktwUGFSWUR5by9NNEFYdXl1OXgrMW0ybHpENkxpYUVtRDg0QkwxdVZkanMva3F1c1E3MHZtWmVRbzF4DQpZNkVwdnd1emV0bThsOXVkdGdSWEZ6SmtpYVRaUlQvTE9MV2k5c3IxU2lSU3pWVnUwdDljbnRadDVxVklZRnk1DQpJbTF3bXRVOE9TbURiNXJqNTlZRzMzMTdGSVR4cVgrMDVlczgrUUM3dVh4amw2dCtYQy90NTZCdUlZUDUzdzZzDQphM1c2SzFzcE1NZER6UEplK2trS0o5T01PV053TTY0dUNDZnprdExwaW1sSHNVU21qSzV3Y3BUWTZDN2xZWURaDQpKL0NDeGRPVGh1NUtVTUVTeWZKelB5dVB6bHZLVkY5NzlGWDdzRHUwQUNUVjNOZzAvRjZKejEzbDJYSmZBcXpHDQp3VWJmbCtIZHVWS1BPNHBnR3FlZ1N1VU9wYWJVQnJsMXdVZWRoaHU2bC9KQWF0MFlrMFVWWERqcWd1NnpXd0NqDQpzbnk2d2F5LzdvY2xIblVEaWxqRHlwbEZlSDcvZzQ5WnJ0My9sM0p6Y2NDSzZHaHFjTXBxbE9Nc00vV1FmVnNzDQpQMG9yVUJheGhUQWFYZ3pMbkJEU24wUks4WWVzRDVIclNsMWlOTkI5UGw1RU1NSHFVYXB3WnNWU0JEK09RUEZyDQpLR2JreFMyd0NMYUpYUktONHBsUVoyODl0bkpYNVUrRVVtRjVLT1cweVp2TQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  client.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJSktnSUJBQUtDQWdFQXhUbWdlQlFJRTJwRnVVNjZIWXdsN2trOG9wT0sxNTZDZDRlSmJJa2xHSGRKblFyWQ0KY3FQd3J6enZXUlZYeTRsTkRqNStSUTM3UnZUb1VQNllkTW9yOWxCdDIyQnArNmRBL0luRHlybHpOa2R3NUZkSw0KNTZRV3oyK29FTE9kWC91dGhpTXZFWEhQZUZ6byt4SjJlaktYUUcvREd0aGMwaTRSK0R2dFU3WXlPcWtCNlJxdg0KNHcvNkRhSzA0MWt5ZXR6WTdOL2hXcXF0NFZzTFk4dGlvWGpFN2xEaGovNGdTQXdrbVljQjBkKzZBOUwyZzJQRg0KcUFyNjlmbi9oTnA3TlYzT1FiN0NyVjNiVmZtbkRFMHNoTHNFREJmV2pNVXM5Uklsc3NUKzg5T2paZmUwSk13Wg0KZEZOUHlJdHRWR1pJeGFRQkJ1VS9QVFNXQlpqK252dVVkNkh0R3hKOWdML0JUZmZKV09uMGFiendOeVJVL2ZwWQ0KMHBuVk0rZ24xQ2NKVjZpYm9uWElIWVJtS3Rqa1ZoNzdqY1ZseTZteTBRQkt5RU5YdkFyK3QrUE50UUdTdHhzLw0KWG9wRVdMcHVuTWd3TUJTVDIrV1B1OGkzOWxQa3R5R2I3YWJKeUQ2Mi81aFJkUVlEKzBURTBoZkhKbFk5Vkw1QQ0KM29jNkRzUmNKd2szUDUrdXVJWTlyMmpoR1VFdFJKUG9XT0tadzRhOCtxZ01KOXZ0ZlFsU1Zjd0Nxd3Nla1J2Qg0KUFNpdmRYRGtPNS9EUnVuczhJTXl4a1plZDNqaXRhbFR0UUdCR0FhR2M4L1BpTGcvSk5kMzV3TjQwYUxaMjJvZQ0KdUhWNUtBZU9za1R3ZTFDcmFIaHl5ck83VklEd3FOMzZqUFdPQVVwSDVKVDNERmFiRHRuNU9JNGx5MzhDQXdFQQ0KQVFLQ0FnQU9MdU84WHV4cHdRVzhtczNGbkRPS0hGZ3c5TjFTUGtMeHA1eVpZbzk1WC9LNlNYSmhaQ3JGMzJMeg0KREJiaE8wR0FXYndvNlNWOTU5VGhKajMrZ0IrRE9pdDhVRVd1NUV0SEhmMG5rZ2lZQ2JFenFwZG5heVI4ekhIUQ0KcWFvU29mM0xuTElnMWdkdWgzZjF2bEVvM29TRURNV0NJN2NoSWxFR2dnRENPV01KVnVnZFJGOEx2RFZtVDZJaw0KaTJDVzkxVGVUQWRmeHRCMFdXRExUM0FMWHEwQzJtd3VONzlJang3K3IzZlJDUDdPa1poS3dKMFJSYURnbVpibg0KamZLNFZzT2pkTDE1VER1ZXhqSmVMeHFaZlAyQWhTSlh3MEpGYVlXdWduNDNPS3dTaENxL1RySXg3Ri9iY3pOcw0KazJKK1hCbjZ6ZmVyUmlIWHl6WGNad2s1UlRyUXpFUG9KZFZkR0NxR1drZ3BwdWhwZWp3Rjk4ZmFMWmE5ckkvdA0KRk92b2FPSGNRQWNBeUs1SG1zU0JJMjZWSVpSU08waDAzTFJLblZKZWpWUzdNNlVubTMrVEhIeVdVTklkMmMzYg0KaThma3NXRzBodEhzeThtRjFMbWJHbDhYNzZISGNWcldpY0VkSHpRd2t1aGUvR0NOYi96NmN0bi9tNnhGQ0pqUw0KSGpDNGN2Y1hzT1Eyc3RxY2hiN3F1U1I2Qmk5SXByb3hLNHRHRnR0K21lL0liUXZIdWdEME9ZL2hVYmdvZzZsWA0KRWo3OW42Y1J0akQ0NVU4aWMrWXA1Z0tRRXF3L0U5QUJYYWpGam5TczRTQ2g2SUJsd2prb3lwdk0yRDU3cVdRRw0KN2pMMFcyK1VsNERlTDNwTUxua3dWdG8zdWVMVE45Mll4VnU1ODhZRm1uOUc1am0rd1FLQ0FRRUEzT0NhYzBHSw0KSTJuQ0JlWmc3ZjdZTTQ3V0ZBUGdHajhlWW9lTkR3VW1ZS1BHbnNkSXlaZFc1RUJrekRZNk40SUYrNER0d0pybA0Kb3dwS0p1MDArbDdHdEtxY3BJeVpLampjTHFDUDdTbzNtNFVpTC9kSkl4WWJQY05veXd0V09sMUNiZmRQZVh4UA0KcTRRcFVIbUYxallKYTVYTFRBUXRCSm5PNFhLeVpZN0VmOWpwWUxQZGwwdWNYRkxSWkNESFUxUkRXSVdIenRXag0KaHNBTjRtMnpBaVg4RHlIY0Y1WUtVYVZvcEZZUm45M0JIMTl6aHZ1NVZHZ29icW1uVDlBa1RZODBKZWpETnFRMQ0KcDZFRHVlbEJ4VDhDMEFRMjlESmlQSjFQVEI5WHNlSEpKQjBEWU5XdGk0TlJ4NHkvYldpcGwxdFdOUWFhblpQYg0KOXVDVkF0ZXVuaml4b1FLQ0FRRUE1Sll5TWVqdG9DUHJsVFl0eTRSeFViUkdPRUMrUm1UYm1rbmdtclNuTjNEZg0KS01yTGcwcW9PaWxNVHlXTUNUaVNscjhiTC9zWklNUGRXUTI4Q0tXUGxzVGZUdVpVVVUwZXpEM2ZJN3NtTVkyNQ0KdkRLZmE2aGxDbEhFVVZieGpUOVRnb1FOZzlRUTk1SFB1Tkd2bmZ5UVVBc1Q2V0xhbDZkVHFsSVdWOGp0cExpMg0KcG5DVmhhOWdoVWpNWDVHRFpxM29sQzRBdmJRNmRBMTRhcmNaRERvdFNQa09MWnVJeXVhRGNHTEhVNWpWT1NrVw0Kekpod0QxaXcrU0l6QVRqdGt0a1VtT2wwRzBERXIzd2JzY05IREhROVlZZ3ZNM1hZVDVtalpoNVpORWR0aktYYg0KMDVVelRNMkRDUTN2Mk5SelRmczBRSnhZYXRjV0hIdjliSjdHTStXcEh3S0NBUUVBa2p4cVJiQzR3cVY4ZmVkLw0KZVZMbTFZdldGTDVVRzB4NjA0VW5VVEI1cmpZQWhKTXdqN2VSSWVHNFdyUDBhMWU4bWoxTUs5N2g5c1lUUGg2Qw0KbXRrdytlQ1RnU1pOS2ZVbllmK1FDdGVPcFhySm5iUTlTZXVTOFp0MHdDbXJWMHp6ZEZidTJXSUNaVzVFNUREdw0KK1ZnaGVJZGVaOS9ENW0zbTJNRFZlQVBEK1ZrbGVvN2JRUllnV2NmRE5tVzFVbWhSaGtReUhEQzU2YmN4K2gzag0KREtNVmRQZFgvbzJxRzFCR0xiZUdSNi9MOHZlQlIzZFZ4cHFIV20wY2h1MHBlK2c2QUhkUTk5WlVaNzFrK0N1Rg0KRGhDZnpoVmNST1V1d1M3dGwxcVE5d2FqNHpNS1Q0eHBNQnNyZzlDZDFOUWNwRWNtbGtqZkNVRWh1eHdKekMzOA0KUUdrTXdRS0NBUUVBb3lad2ZSNzdPNmxucEFBZmYzcndScGljNWRtUDlUNVhYekFMbDJBSldaQytOcWRIeWxXbQ0KN0p3OVV1QkJxdk10N1ZwSlZWMnErYS9TZEpWUTkvcnpHWEU2MFYya0lNTWlrRFE0NTQvVUd0cEZEd1l5c3V4bA0KOFkrYXgxTis1SW1tV1NsWFhCZ29aQXMyYjN0NkZSRUhENXBZZytPQ2tXdGtVOVJ6RGdUaldRWmRsejRUK203Sw0KUFZkUVI0WGNlNVQwdzQ1eUNQUnlKQkxaTjVHbjF3cE8rQjZLK0JKaStDNis4YUFQRktPb3pEdC9nbGZxNDRreQ0KQng5WnVDMmhvNFk5SlVhN0VCaVNTWTRUVmpWQ3FLanVob1prNmgzYVhqWVNZZmlYUXJFWWg2SjUyL0pKd3krTA0KcnhLN2RjOXMzT1BHejdiSGhMb3ZsZlVKVkZXZXNidmhrUUtDQVFFQXlZWVZlK3RHV3BUTUpUbFBHY3Y3c2xtcg0KZjBOMWtYR2FsRXVqOVZ0Qmkxd1BxZytWYmp0MXZCUHdVeDhObFZqQ1g5ME1vZ2Nua2VuRE8xbERkSjJpU01LQw0KYmpSVjhBWmlGOEQ5RFhESjVjT2dtdllzNmV0bkcyMDBjeWRMQ2RudEdRbnNYVjJpTjNnWm56d0ZtUlRXeDZybQ0KeUhQdHlrZTZPR1FPYnNWVU9lcjVMZ3JNeFNjZXgyU0VjeFY2eHhGd0xKeHpwU0hUMEdzejByN3ZncFVEUGZ3eg0Kd0FrT1VJc2FYcU1ZTC9zUDVXNDBLSGtES01xdDZTMEUyQ1V5WUNGdk10TmRQODlwYmE5eUMrVGluZWdVNjFqTQ0KVDYxK0JydXJkUGRMTlppR0VLZFlsT0FKb3ppZVVHYnJBTGtkbUhuRUtlT3liR0UvN1Jaem8yT2t4a1VWZkE9PQ0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0=
---
# Source: quorumkeymanager/templates/configmap-apikey-file.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: quorum-key-manager-quorumkeymanager-apikey-file
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: quorum-key-manager
    meta.helm.sh/release-namespace: qa-qkm
data:
  sample.csv: |
    ## Notes: Request headers should be "Authorization: Basic base64({user-key})"
    ## Column separator is ";"

    # sha256("admin-user")
    f470213d9ae659187a19b9cb2169b4b400544f4d3f59250eda657154700da616;tenant1|user1;*:*;admin
    # sha256("guest-user")
    8605f70ff5f55e2a9323d97de3dbf8e61f38314d93298ca00e19f8918fe8971b;tenant2|user2;*:secrets,*:keys,read:ethereum;anonymous
---
# Source: quorumkeymanager/templates/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: quorum-key-manager-quorumkeymanager-envmap
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: quorum-key-manager
    meta.helm.sh/release-namespace: qa-qkm
data:
  AUTH_API_KEY_FILE: "/apikey/sample.csv"
  AUTH_OIDC_CA_CERT: "/oidc_certs/ca.crt"
  AUTH_OIDC_ISSUER_URL: "https://e2e-qkm.eu.auth0.com/.well-known/jwks.json"
  AUTH_TLS_CA: "/certificates/ca.crt"
  DB_DATABASE: "testDb"
  DB_HOST: "postgres-postgresql.qa-qkm"
  DB_PASSWORD: "1234567890"
  DB_PORT: "5432"
  DB_TLS_CA: "/postgres/certs/ca.crt"
  DB_TLS_CERT: "/postgres/certs/client.crt"
  DB_TLS_KEY: "/postgres/certs/client.key"
  DB_TLS_SSLMODE: "require"
  HTTPS_ENABLED: "true"
  HTTPS_SERVER_CERT: "/certificates/tls.crt"
  HTTPS_SERVER_KEY: "/certificates/tls.key"
  HTTP_HOST: "0.0.0.0"
  LOG_FORMAT: "json"
  VAULT_ADDR: "https://vault.qa-qkm:8200"
  VAULT_CACERT: "/vault/tls/ca.crt"
  VAULT_CAPATH: "/vault/tls"
  VAULT_CLIENT_CERT: "/vault/tls/client.crt"
  VAULT_CLIENT_KEY: "/vault/tls/client.key"
  VAULT_SKIP_VERIFY: "false"
  VAULT_TLS_SERVER_NAME: "vault.qa-qkm"
---
# Source: quorumkeymanager/templates/configmap-vault-agent.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: quorum-key-manager-quorumkeymanager-vault-agent
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: quorum-key-manager
    meta.helm.sh/release-namespace: qa-qkm
data:
  init-agent-config.hcl: |
    exit_after_auth = true
    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "quorumkeymanager"
        }
      }
      sink "file" {
        wrap_ttl = ""
        config = {
          path = "/vault/token/.agent-vault-token"
          mode = 0444
        }
      }
    }
  agent-config.hcl: |
    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "quorumkeymanager"
        }
      }
      sink "file" {
        wrap_ttl = ""
        config = {
          path = "/vault/token/.agent-vault-token"
          mode = 0444
        }
      }
    }
---
# Source: quorumkeymanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: quorum-key-manager-quorumkeymanager
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http-svc
      protocol: TCP
      name: http-svc
    - port: 8081
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
---
# Source: quorumkeymanager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quorum-key-manager-quorumkeymanager
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: quorumkeymanager
      app.kubernetes.io/instance: quorum-key-manager
  template:
    metadata:
      annotations:
        checksum/manifests: 197db0470b85d64a0f09e2575ab15ffb307c8f6da96ec215de82b8a09c3ab66c
        checksum/configEnv: 95823b57f7c39000dfcf08c8bfa5e86ec1f95fbafe418afc4b4a6b3eba462898
      labels:
        app.kubernetes.io/name: quorumkeymanager
        app.kubernetes.io/instance: quorum-key-manager
    spec:
      imagePullSecrets:
        - name: existing-secret
      serviceAccountName: quorum-key-manager-quorumkeymanager
      securityContext:
        {}
      # to avoid "not found" token issue at start
      initContainers:
        - name: init-token
          securityContext:
            capabilities:
              add:
              - IPC_LOCK
          image: "vault:1.8.2"
          args:
            - "agent"
            - "-config"
            - "/vault/config/init-agent-config.hcl"
          env:
            - name: SKIP_CHOWN
              value: "true"
          envFrom:
            - configMapRef:
                name: quorum-key-manager-quorumkeymanager-envmap
                optional: true
          volumeMounts:
            - name: vault-token
              mountPath: /vault/token
            - name: vault-config
              mountPath: /vault/config
            - name: vault-tls
              mountPath: /vault/tls
      containers:
        - name: vault-agent
          securityContext:
            capabilities:
              add:
              - IPC_LOCK
          image: "vault:1.8.2"
          args:
            - "agent"
            - "-config"
            - "/vault/config/agent-config.hcl"
          env:
            - name: SKIP_CHOWN
              value: "true"
          envFrom:
            - configMapRef:
                name: quorum-key-manager-quorumkeymanager-envmap
                optional: true
          volumeMounts:
            - name: vault-token
              mountPath: /vault/token
            - name: vault-config
              mountPath: /vault/config
            - name: vault-tls
              mountPath: /vault/tls
        - name: quorumkeymanager
          securityContext:
            {}
          image: "docker.io/consensys/quorum-key-manager:v21.9.1"
          imagePullPolicy: Always
          args:
            - run
            - --manifest-path
            - /manifests/manifests.yaml
          envFrom:
            - configMapRef:
                name: quorum-key-manager-quorumkeymanager-envmap
                optional: true
          ports:
            - name: http-svc
              containerPort: 8080
              protocol: TCP
            - name: http-metrics
              containerPort: 8081
              protocol: TCP
          volumeMounts:
            - name: vault-token
              mountPath: /vault/token
              readOnly: true
            - name: vault-tls
              mountPath: /vault/tls
              readOnly: true
            - name: postgres-certs
              mountPath: /postgres/certs
              readOnly: true
            - name: apikey-file
              mountPath: /apikey
              readOnly: true
            - name: qkm-certs
              mountPath: /certificates
              readOnly: true
            - name: oidc-certs
              mountPath: /oidc_certs
              readOnly: true
            - name: manifests-config
              mountPath: /manifests
          livenessProbe:
            httpGet:
              scheme: HTTPS
          
              path: /live
              port: http-metrics
          readinessProbe:
            httpGet:
              scheme: HTTPS
          
              path: /ready
              port: http-metrics
          resources:
            {}
      volumes:
        - name: vault-token
          emptyDir:
            sizeLimit: 1M
        - name: vault-config
          configMap:
            name: quorum-key-manager-quorumkeymanager-vault-agent
        - name: vault-tls
          secret:
            secretName: quorum-key-manager-quorumkeymanager-vault-certs
        - name: postgres-certs
          secret:
            secretName: quorum-key-manager-quorumkeymanager-postgres-certs
        - name: apikey-file
          configMap:
            name: quorum-key-manager-quorumkeymanager-apikey-file
        - name: qkm-certs
          secret:
            secretName: qkm-tls
        - name: oidc-certs
          secret:
            secretName: quorum-key-manager-quorumkeymanager-oidc-certs
        - name: manifests-config
          secret:
            secretName: quorum-key-manager-quorumkeymanager-manifests
---
# Source: quorumkeymanager/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "quorum-key-manager-quorumkeymanager-test-connection"
  labels:
    helm.sh/chart: quorumkeymanager-1.0.17
    app.kubernetes.io/name: quorumkeymanager
    app.kubernetes.io/instance: quorum-key-manager
    app.kubernetes.io/version: "v21.9.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['quorum-key-manager-quorumkeymanager:8080']
  restartPolicy: Never

