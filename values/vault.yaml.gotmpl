{{ $replicaCount := .Values | get "vault.replicaCount" 1 }}

templates:
- |
  apiVersion: vault.banzaicloud.com/v1alpha1
  kind: Vault
  metadata:
    name: vault
  spec:
    size: {{ $replicaCount }}
    image: vault:1.8.2
    bankVaultsImage: banzaicloud/bank-vaults:1.8.0

    # Vault Pods , Services and TLS Secret annotations
    vaultAnnotations:
      type/instance: "vault"

    # Vault Configurer Pods and Services annotations
    vaultConfigurerAnnotations:
      type/instance: "vaultconfigurer"

    # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
    serviceAccount: vault

    serviceType: ClusterIP

    vaultInitContainers:
      - name: orchestrate-plugin
        image: alpine:3.13
        command:
          - /bin/sh
          - -c
          - |
            wget -q --header='Accept:application/octet-stream' \
              $PLUGIN_REPO/releases/download/$PLUGIN_VERSION/$PLUGIN_FILE \
              -O "${PLUGINS_PATH}/${PLUGINS_LOCAL_FILE}"
            chmod +x ${PLUGINS_PATH}/${PLUGINS_LOCAL_FILE}
            echo "${PLUGIN_VERSION}/${PLUGIN_FILE} downloaded"
            echo "File at ${PLUGINS_PATH}/${PLUGINS_LOCAL_FILE}"
        env: 
          - name: PLUGIN_VERSION
            value: {{ .Values.vault.plugin.tag }}
          - name: PLUGIN_FILE
            value: orchestrate-hashicorp-vault-plugin
          - name: PLUGIN_LOCAL_FILE
            value: {{ .Values.vault.plugin.file }}
          - name: PLUGIN_REPO
            value: https://github.com/ConsenSys/orchestrate-hashicorp-vault-plugin
          - name: PLUGINS_PATH
            value: /vault/plugins
          
        volumeMounts:
          - name: vault-plugin
            mountPath: /vault/plugins

    # Use local disk to store Vault file data, see config section.
    
    volumeMounts:
      - name: vault-plugin
        mountPath: /vault/plugins
      - name: vault-file
        mountPath: /vault/file

    {{- if gt $replicaCount 1 }}
    podAntiAffinity: topology.kubernetes.io/zone
    {{- end }}

    volumeClaimTemplates:
      - metadata:
          name: vault-file
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
      - metadata:
          name: vault-plugin
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi

    vaultContainerSpec:
      lifecycle:
        postStart:
          exec:
            command: ["/bin/sh", "-c", "setcap cap_ipc_lock=+ep /vault/plugins/orchestrate"]
  
    # Describe where you would like to store the Vault unseal keys and root token.
    unsealConfig:
      options:
        # The preFlightChecks flag enables unseal and root token storage tests
        # This is true by default
        preFlightChecks: true
      kubernetes:
        secretNamespace: {{ .Values.vault.namespace }}

    # A YAML representation of a final vault config file.
    # See https://www.vaultproject.io/docs/configuration/ for more information.
    config:
      storage:
        {{- if gt $replicaCount 1 }}
        raft:
        {{- else }}
        file:
        {{- end }}
          path: /vault/file
      listener:
        tcp:
          address: 0.0.0.0:8200
          tls_disable: true
      plugin_directory: /vault/plugins
      api_addr: http://localhost:8200
      cluster_addr: http://${.Env.POD_NAME}:8201
      {{ if .Values.observability.enabled }}
      telemetry:
        statsd_address: localhost:9125
      {{ end }}

    # See: https://github.com/banzaicloud/bank-vaults#example-external-vault-configuration for more details.
    externalConfig:
      policies:
        {{ if .Values.observability.enabled }}
        - name: prometheus
          rules: path "sys/metrics" {
            capabilities = ["list", "read"]
            }
        {{ end }}
        - name: quorumkeymanager_keys
          rules: path "{{ .Values.vault.plugin.file }}/*" {
            capabilities = ["create", "read", "delete", "update", "list"]
            }
        - name: quorumkeymanager_secrets
          rules: path "secret/*" {
            capabilities = ["create", "read", "delete", "update", "list"]
            }
      auth:
        - type: kubernetes
          roles:
            - name: quorumkeymanager
              bound_service_account_names: ["quorum-key-manager-quorumkeymanager", "vault-secrets-webhook", "vault"]
              bound_service_account_namespaces: ["{{ .Values.vault.namespace }}", "{{ .Values.qkm.namespace }}"]
              policies: ["quorumkeymanager_keys", "quorumkeymanager_secrets"]
        {{ if .Values.observability.enabled }}
        - type: kubernetes
          roles:
            - name: prometheus
              bound_service_account_names: prometheus
              bound_service_account_namespaces: {{ .Values.observability.namespace }}
              policies: prometheus
        {{ end }}

      secrets:
        - path: {{ .Values.vault.plugin.file }}
          type: plugin
          plugin_name: {{ .Values.vault.plugin.file }}
          description: QKM key storage gateway
          config:
            force_no_cache: true
            passthrough_request_headers: ["X-Vault-Namespace"]
        - path: secret
          type: kv
          description: QKM secrets
          options:
            version: 2

      plugins:
        - plugin_name: {{ .Values.vault.plugin.file }}
          command: {{ .Values.vault.plugin.file }}
          sha256: {{ .Values.vault.plugin.sha256 }}
          type: secret

    serviceMonitorEnabled: {{ .Values.observability.enabled }}
- |
  kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: vault
- |
  kind: Role
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: vault-secrets
  rules:
    - apiGroups:
        - ""
      resources:
        - secrets
      verbs:
        - "*"
- |
  kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: vault-secrets
  roleRef:
    kind: Role
    name: vault-secrets
    apiGroup: rbac.authorization.k8s.io
  subjects:
    - kind: ServiceAccount
      name: vault
- |
  # This binding allows the deployed Vault instance to authenticate clients
  # through Kubernetes ServiceAccounts (if configured so).
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: {{ .Values.qkm.namespace }}-vault-auth-delegator
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
    - kind: ServiceAccount
      name: vault
      namespace: {{ .Values.vault.namespace }}
    - kind: ServiceAccount
      name: vault
      namespace: {{ .Values.qkm.namespace }}