image:
  {{- .Values.qkm.image | toYaml | nindent 2 }}
  pullPolicy: {{ .Values.qkm.image.pullPolicy }}
environment:
  VAULT_ADDR: http://vault.{{ .Values.vault.namespace }}:8200
  {{ if .Values.vault.tls.enabled }}
  VAULT_ADDR: https://vault.{{ .Values.vault.namespace }}:8200
  VAULT_CACERT: "/vault/tls/ca.crt"
  VAULT_CAPATH: "/vault/tls"
  VAULT_CLIENT_CERT: "/vault/tls/client.crt"
  VAULT_CLIENT_KEY: "/vault/tls/client.key"
  VAULT_SKIP_VERIFY: {{ .Values.vault.tls.skipVerify }}
  VAULT_TLS_SERVER_NAME: vault.{{ .Values.vault.namespace }}
  {{ end }}
  HTTP_HOST: 0.0.0.0
  LOG_FORMAT: json
  DB_HOST: postgres-postgresql.{{ .Values.vault.namespace }}
  DB_PORT: 5432
  DB_DATABASE: {{ .Values.postgresql.Database }}
  DB_PASSWORD: "1234567890"
  {{ if .Values.postgresql.tls.enabled }}
  DB_TLS_SSLMODE: "require"
  DB_TLS_CA: "/postgres/certs/ca.crt"
  DB_TLS_CERT: "/postgres/certs/client.crt"
  DB_TLS_KEY: "/postgres/certs/client.key"
  {{ end }}
  {{ if .Values.auth.tls.enabled }}
  HTTPS_ENABLED: {{ .Values.auth.tls.enabled }}
  HTTPS_SERVER_KEY: "/certificates/tls.key"
  HTTPS_SERVER_CERT: "/certificates/tls.crt"
  AUTH_TLS_CA: "/certificates/ca.crt"
  {{ end }}
  {{ if .Values.auth.apikey.enabled }}
  AUTH_API_KEY_FILE: {{ .Values.auth.apikey.file }}
  {{ end }}
  {{ if .Values.auth.oidc.enabled }}
  AUTH_OIDC_CA_CERT: "/oidc_certs/ca.crt"
  AUTH_OIDC_ISSUER_URL: {{ .Values.auth.oidc.issuer }}
  {{ end }}
  {{- range $key,$value := .Values.qkm.environment }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}
environmentSecrets:
  {{- range $key,$value := .Values.qkm.environmentSecrets }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}
vaultAgent:
  role: "quorumkeymanager"
{{- if .Values.domainName }}
ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: {{ .Values.qkm.namespace }}.{{ .Values.domainName }}
      paths:
        - path: /
          backend:
            servicePort: http-svc
  tls:
    - hosts:
      - {{ .Values.qkm.namespace }}.{{ .Values.domainName }}
{{- end }}
      
manifests: |-
  {{ if .Values.nodes }}
  {{ range .Values.nodes }}
  - kind: Node
    name: {{ .name }}
    version: {{ .version }}
    specs:
    {{ if .specs.rpc }}
    {{ if .specs.rpc.addr }}
      rpc:
        addr: {{ .specs.rpc.addr }}
    {{ end }}
    {{ end }}
    {{ if .specs.tessera }}
    {{ if .specs.tessera.addr }}
      tessera:
        addr: {{ .specs.tessera.addr }}
    {{ end }}
    {{ end }}
  {{ end }}
  {{ end }}
  {{ if .Values.roles }}
  {{ range .Values.roles }}
  - kind: Role
    name: {{ .name }}
    specs:
      permission:
        {{- range .specs.permission }}
          - {{ . }}
        {{- end }}
  {{ end }}
  {{ end }}
  {{ if .Values.stores.secrets }}
  {{ if .Values.stores.secrets.akv }}
  {{ range .Values.stores.secrets.akv }}
  - kind: AKVSecrets
    {{ tpl ( readFile "config/header.conf") . | indent 4 }}
    {{ tpl ( readFile "config/akv-specs.conf") . }}
  {{ end }}
  {{ end }}
  {{ if .Values.stores.secrets.aws }}
  {{ range .Values.stores.secrets.aws }}
  - kind: AWSSecrets
    {{ tpl ( readFile "config/header.conf") . | indent 4 }}
    {{ tpl ( readFile "config/aws-specs.conf") . }}
  {{ end }}
  {{ end }}
  {{ if .Values.stores.secrets.hashicorp }}
  {{ range .Values.stores.secrets.hashicorp }}
  - kind: HashicorpSecrets
    {{ tpl ( readFile "config/header.conf") . | indent 4 }}
    {{ tpl ( readFile "config/hashicorp-specs.conf") . }}
  {{ end }}
  {{ end }}
  {{ end }}
  {{ if .Values.stores.keys }}
  {{ if .Values.stores.keys.akv }}
  {{ range .Values.stores.keys.akv }}
  - kind: AKVKeys
    {{ tpl ( readFile "config/header.conf") . | indent 4 }}
    {{ tpl ( readFile "config/akv-specs.conf") . }}
  {{ end }}
  {{ end }}
  
  {{ if .Values.stores.keys.aws }}
  {{ range .Values.stores.keys.aws }}
  - kind: AWSKeys
    {{ tpl ( readFile "config/header.conf") . | indent 4 }}
    {{ tpl ( readFile "config/aws-specs.conf") . }}
  {{ end }}
  {{ end }}
  {{ if .Values.stores.keys.hashicorp }}
  {{ range .Values.stores.keys.hashicorp }}
  - kind: HashicorpKeys
    {{ tpl ( readFile "config/header.conf") . | indent 4 }}
    {{ tpl ( readFile "config/hashicorp-specs.conf") . }}
  {{ end }}
  {{ end }}
  {{ if .Values.stores.keys.local }}
  {{ range .Values.stores.keys.local }}
  - kind: LocalKeys
    {{ tpl ( readFile "config/header.conf") . | indent 4 }}
    {{ tpl ( readFile "config/hashicorp-specs.conf") . }}
  {{ end }}
  {{ end }}
  {{ end }}
  {{ if .Values.stores.ethereum }}
  {{ range .Values.stores.ethereum }}
  - kind: Ethereum
    {{ tpl ( readFile "config/header.conf") . | indent 4 }}
     specs:
     keystore: {{ .keystore }}
      {{ if or (eq .keystore "HashicorpKeys") (eq .keystore "LocalKeys") }}
      {{ tpl ( readFile "config/hashicorp-specs.conf") . }}
      {{ end }}
      {{ if or (eq .keystore "AWSKeys") (eq .keystore "AWSecrets") }}
      {{ tpl ( readFile "config/aws-specs.conf") . }}
      {{ end }}
      {{ if or (eq .keystore "AKVKeys") (eq .keystore "AKVSecrets") }}
      {{ tpl ( readFile "config/akv-specs.conf") . }}
      {{ end }}
  {{ end }}
  {{ end }}

vaultAgent:
  certs:
    ca: {{ .Values.vaultAgent.certs.ca }}
    client:
      key: {{ .Values.vaultAgent.certs.client.key }}
      crt: {{ .Values.vaultAgent.certs.client.crt }}
postgresql:
  certs:
    ca: {{ .Values.postgresql.certs.ca }}
    client:
      key: {{ .Values.postgresql.certs.client.key }}
      crt: {{ .Values.postgresql.certs.client.crt }}
auth:
  apikey:
    enabled: {{ .Values.auth.apikey.enabled }}
    file: {{ .Values.auth.apikey.file }}
  oidc:
    enabled: {{ .Values.auth.oidc.enabled }}
    ca: {{ .Values.auth.oidc.ca }}
    issuer: {{ .Values.auth.oidc.issuer }}
  tls:
    enabled: {{ .Values.auth.tls.enabled }}
    cacert: {{ .Values.auth.tls.cacert }}
    secretName: {{ .Values.auth.tls.secretName }}
