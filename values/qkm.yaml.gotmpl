image:
  {{- .Values.qkm.image | toYaml | nindent 2 }}
  pullPolicy: {{ .Values.qkm.image.pullPolicy }}
environment:
  VAULT_ADDR: http://vault.{{ .Values.vault.namespace }}:8200
  {{ if .Values.vault.tls.enabled }}
  VAULT_ADDR: https://vault.{{ .Values.vault.namespace }}:8200
  VAULT_CACERT: "/vault/tls/ca.crt"
  VAULT_CAPATH: "/vault/tls"
  VAULT_CLIENT_CERT: "/vault/tls/client.crt"
  VAULT_CLIENT_KEY: "/vault/tls/client.key"
  VAULT_SKIP_VERIFY: {{ .Values.vault.tls.skipVerify }}
  VAULT_TLS_SERVER_NAME: vault.{{ .Values.vault.namespace }}
  {{ end }}
  HTTP_HOST: 0.0.0.0
  LOG_FORMAT: json
  DB_HOST: postgres-postgresql.{{ .Values.vault.namespace }}
  DB_PORT: 5432
  DB_DATABASE: {{ .Values.postgresql.Database }}
  DB_PASSWORD: "1234567890"
  {{ if .Values.postgresql.tls.enabled }}
  DB_TLS_SSLMODE: "require"
  DB_TLS_CA: "/postgres/certs/ca.crt"
  DB_TLS_CERT: "/postgres/certs/client.crt"
  DB_TLS_KEY: "/postgres/certs/client.key"
  {{ end }}
  {{ if .Values.auth.tls.enabled }}
  HTTPS_ENABLED: {{ .Values.auth.tls.enabled }}
  HTTPS_SERVER_KEY: "/certificates/tls.key"
  HTTPS_SERVER_CERT: "/certificates/tls.crt"
  AUTH_TLS_CA: "/certificates/ca.crt"
  {{ end }}
  {{ if .Values.auth.apikey.enabled }}
  AUTH_API_KEY_FILE: {{ .Values.auth.apikey.file }}
  {{ end }}
  {{ if .Values.auth.oidc.enabled }}
  AUTH_OIDC_CA_CERT: "/oidc_certs/ca.crt"
  AUTH_OIDC_ISSUER_URL: {{ .Values.auth.oidc.issuer }}
  {{ end }}
  {{- range $key,$value := .Values.qkm.environment }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}
environmentSecrets:
  {{- range $key,$value := .Values.qkm.environmentSecrets }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}
vaultAgent:
  role: "quorumkeymanager"
{{- if .Values.domainName }}
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: {{ .Values.qkm.namespace }}.{{ .Values.domainName }}
      paths:
        - path: /
          backend:
            servicePort: http-svc
  tls:
    - hosts:
      - {{ .Values.qkm.namespace }}.{{ .Values.domainName }}
{{- end }}
manifests: |
  - kind: Node
    name: quorum-node
    version: 0.0.0
    specs:
      rpc:
        addr: https://quorum1.ops.consensys.net:8545
      tessera:
        addr: https://quorum1.ops.consensys.net:8545/tessera
  - kind: Node
    name: besu-node
    version: 0.0.0
    specs:
      rpc:
        addr: https://besu1.ops.consensys.net:8545
  - kind: Node
    name: geth-node
    version: 0.0.0
    specs:
      rpc:
        addr: https://geth.ops.consensys.net:8545
  - kind: Role
    name: anonymous
    specs:
      permission:
        - "proxy:nodes"
  - kind: Role
    name: guest
    specs:
      permission:
        - "read:*"
  - kind: Role
    name: signer
    specs:
      permission:
        - "read:*"
        - "sign:keys"
        - "sign:ethereum"
  - kind: Role
    name: admin
    specs:
      permission:
        - "*:*"
  - kind: HashicorpSecrets
    version: 0.0.1
    name: hashicorp-secrets
    specs:
      mountPoint: secret
      {{ if .Values.vault.tls.enabled }}
      address: https://vault.{{ .Values.vault.namespace }}:8200
      {{ else }}
      address: http://vault.{{ .Values.vault.namespace }}:8200
      {{ end }}
      tokenPath: /vault/token/.agent-vault-token
      namespace: ''
      CACert: /vault/tls/ca.crt
      clientCert: /vault/tls/client.crt
      clientKey: /vault/tls/client.key
      skipVerify: true
  - kind: HashicorpKeys
    version: 0.0.1
    name: hashicorp-keys
    specs:
      mountPoint: quorum
      {{ if .Values.vault.tls.enabled }}
      address: https://vault.{{ .Values.vault.namespace }}:8200
      {{ else }}
      address: http://vault.{{ .Values.vault.namespace }}:8200
      {{ end }}
      tokenPath: /vault/token/.agent-vault-token
      namespace: ''
      CACert: /vault/tls/ca.crt
      clientCert: /vault/tls/client.crt
      clientKey: /vault/tls/client.key
      skipVerify: true
  - kind: LocalKeys
    version: 0.0.1
    name: local-keys
    specs:
      secretstore: HashicorpSecrets
      specs:
        mountPoint: secret
        {{ if .Values.vault.tls.enabled }}
        address: https://vault.{{ .Values.vault.namespace }}:8200
        {{ else }}
        address: http://vault.{{ .Values.vault.namespace }}:8200
        {{ end }}
        tokenPath: /vault/token/.agent-vault-token
        namespace: ''
        CACert: /vault/tls/ca.crt
        clientCert: /vault/tls/client.crt
        clientKey: /vault/tls/client.key
        skipVerify: true
  - kind: Ethereum
    version: 0.0.1
    name: eth-accounts
    specs:
      keystore: HashicorpKeys
      specs:
        mountPoint: quorum
        {{ if .Values.vault.tls.enabled }}
        address: https://vault.{{ .Values.vault.namespace }}:8200
        {{ else }}
        address: http://vault.{{ .Values.vault.namespace }}:8200
        {{ end }}
        tokenPath: /vault/token/.agent-vault-token
        namespace: ''
        CACert: /vault/tls/ca.crt
        clientCert: /vault/tls/client.crt
        clientKey: /vault/tls/client.key
        skipVerify: true
        
vaultAgent:
  certs:
    ca: {{ .Values.vaultAgent.certs.ca }}
    client:
      key: {{ .Values.vaultAgent.certs.client.key }}
      crt: {{ .Values.vaultAgent.certs.client.crt }}
postgresql:
  certs:
    ca: {{ .Values.postgresql.certs.ca }}
    client:
      key: {{ .Values.postgresql.certs.client.key }}
      crt: {{ .Values.postgresql.certs.client.crt }}
auth:
  apikey:
    enabled: {{ .Values.auth.apikey.enabled }}
    file: {{ .Values.auth.apikey.file }}
  oidc:
    enabled: {{ .Values.auth.oidc.enabled }}
    ca: {{ .Values.auth.oidc.ca }}
    issuer: {{ .Values.auth.oidc.issuer }}
  tls:
    enabled: {{ .Values.auth.tls.enabled }}
    cacert: {{ .Values.auth.tls.cacert }}
    secretName: {{ .Values.auth.tls.secretName }}
